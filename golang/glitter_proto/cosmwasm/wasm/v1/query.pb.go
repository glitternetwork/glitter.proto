// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0-devel
// 	protoc        v3.14.0
// source: cosmwasm/wasm/v1/query.proto

package types

import (
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QueryContractInfoRequest is the request type for the Query/ContractInfo RPC
// method
type QueryContractInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address is the address of the contract to query
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *QueryContractInfoRequest) Reset() {
	*x = QueryContractInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryContractInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContractInfoRequest) ProtoMessage() {}

func (x *QueryContractInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContractInfoRequest.ProtoReflect.Descriptor instead.
func (*QueryContractInfoRequest) Descriptor() ([]byte, []int) {
	return file_cosmwasm_wasm_v1_query_proto_rawDescGZIP(), []int{0}
}

func (x *QueryContractInfoRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// QueryContractInfoResponse is the response type for the Query/ContractInfo RPC
// method
type QueryContractInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address is the address of the contract
	Address      string        `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	ContractInfo *ContractInfo `protobuf:"bytes,2,opt,name=contract_info,json=contractInfo,proto3" json:"contract_info,omitempty"`
}

func (x *QueryContractInfoResponse) Reset() {
	*x = QueryContractInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryContractInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContractInfoResponse) ProtoMessage() {}

func (x *QueryContractInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContractInfoResponse.ProtoReflect.Descriptor instead.
func (*QueryContractInfoResponse) Descriptor() ([]byte, []int) {
	return file_cosmwasm_wasm_v1_query_proto_rawDescGZIP(), []int{1}
}

func (x *QueryContractInfoResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *QueryContractInfoResponse) GetContractInfo() *ContractInfo {
	if x != nil {
		return x.ContractInfo
	}
	return nil
}

// QueryContractHistoryRequest is the request type for the Query/ContractHistory
// RPC method
type QueryContractHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address is the address of the contract to query
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryContractHistoryRequest) Reset() {
	*x = QueryContractHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryContractHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContractHistoryRequest) ProtoMessage() {}

func (x *QueryContractHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContractHistoryRequest.ProtoReflect.Descriptor instead.
func (*QueryContractHistoryRequest) Descriptor() ([]byte, []int) {
	return file_cosmwasm_wasm_v1_query_proto_rawDescGZIP(), []int{2}
}

func (x *QueryContractHistoryRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *QueryContractHistoryRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryContractHistoryResponse is the response type for the
// Query/ContractHistory RPC method
type QueryContractHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*ContractCodeHistoryEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryContractHistoryResponse) Reset() {
	*x = QueryContractHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryContractHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContractHistoryResponse) ProtoMessage() {}

func (x *QueryContractHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContractHistoryResponse.ProtoReflect.Descriptor instead.
func (*QueryContractHistoryResponse) Descriptor() ([]byte, []int) {
	return file_cosmwasm_wasm_v1_query_proto_rawDescGZIP(), []int{3}
}

func (x *QueryContractHistoryResponse) GetEntries() []*ContractCodeHistoryEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *QueryContractHistoryResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryContractsByCodeRequest is the request type for the Query/ContractsByCode
// RPC method
type QueryContractsByCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeId uint64 `protobuf:"varint,1,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"` // grpc-gateway_out does not support Go style CodID
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryContractsByCodeRequest) Reset() {
	*x = QueryContractsByCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryContractsByCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContractsByCodeRequest) ProtoMessage() {}

func (x *QueryContractsByCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContractsByCodeRequest.ProtoReflect.Descriptor instead.
func (*QueryContractsByCodeRequest) Descriptor() ([]byte, []int) {
	return file_cosmwasm_wasm_v1_query_proto_rawDescGZIP(), []int{4}
}

func (x *QueryContractsByCodeRequest) GetCodeId() uint64 {
	if x != nil {
		return x.CodeId
	}
	return 0
}

func (x *QueryContractsByCodeRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryContractsByCodeResponse is the response type for the
// Query/ContractsByCode RPC method
type QueryContractsByCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contracts are a set of contract addresses
	Contracts []string `protobuf:"bytes,1,rep,name=contracts,proto3" json:"contracts,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryContractsByCodeResponse) Reset() {
	*x = QueryContractsByCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryContractsByCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContractsByCodeResponse) ProtoMessage() {}

func (x *QueryContractsByCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContractsByCodeResponse.ProtoReflect.Descriptor instead.
func (*QueryContractsByCodeResponse) Descriptor() ([]byte, []int) {
	return file_cosmwasm_wasm_v1_query_proto_rawDescGZIP(), []int{5}
}

func (x *QueryContractsByCodeResponse) GetContracts() []string {
	if x != nil {
		return x.Contracts
	}
	return nil
}

func (x *QueryContractsByCodeResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryAllContractStateRequest is the request type for the
// Query/AllContractState RPC method
type QueryAllContractStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address is the address of the contract
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllContractStateRequest) Reset() {
	*x = QueryAllContractStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllContractStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllContractStateRequest) ProtoMessage() {}

func (x *QueryAllContractStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllContractStateRequest.ProtoReflect.Descriptor instead.
func (*QueryAllContractStateRequest) Descriptor() ([]byte, []int) {
	return file_cosmwasm_wasm_v1_query_proto_rawDescGZIP(), []int{6}
}

func (x *QueryAllContractStateRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *QueryAllContractStateRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryAllContractStateResponse is the response type for the
// Query/AllContractState RPC method
type QueryAllContractStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Models []*Model `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllContractStateResponse) Reset() {
	*x = QueryAllContractStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllContractStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllContractStateResponse) ProtoMessage() {}

func (x *QueryAllContractStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllContractStateResponse.ProtoReflect.Descriptor instead.
func (*QueryAllContractStateResponse) Descriptor() ([]byte, []int) {
	return file_cosmwasm_wasm_v1_query_proto_rawDescGZIP(), []int{7}
}

func (x *QueryAllContractStateResponse) GetModels() []*Model {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *QueryAllContractStateResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryRawContractStateRequest is the request type for the
// Query/RawContractState RPC method
type QueryRawContractStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address is the address of the contract
	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	QueryData []byte `protobuf:"bytes,2,opt,name=query_data,json=queryData,proto3" json:"query_data,omitempty"`
}

func (x *QueryRawContractStateRequest) Reset() {
	*x = QueryRawContractStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRawContractStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRawContractStateRequest) ProtoMessage() {}

func (x *QueryRawContractStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRawContractStateRequest.ProtoReflect.Descriptor instead.
func (*QueryRawContractStateRequest) Descriptor() ([]byte, []int) {
	return file_cosmwasm_wasm_v1_query_proto_rawDescGZIP(), []int{8}
}

func (x *QueryRawContractStateRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *QueryRawContractStateRequest) GetQueryData() []byte {
	if x != nil {
		return x.QueryData
	}
	return nil
}

// QueryRawContractStateResponse is the response type for the
// Query/RawContractState RPC method
type QueryRawContractStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data contains the raw store data
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryRawContractStateResponse) Reset() {
	*x = QueryRawContractStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRawContractStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRawContractStateResponse) ProtoMessage() {}

func (x *QueryRawContractStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRawContractStateResponse.ProtoReflect.Descriptor instead.
func (*QueryRawContractStateResponse) Descriptor() ([]byte, []int) {
	return file_cosmwasm_wasm_v1_query_proto_rawDescGZIP(), []int{9}
}

func (x *QueryRawContractStateResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// QuerySmartContractStateRequest is the request type for the
// Query/SmartContractState RPC method
type QuerySmartContractStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address is the address of the contract
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// QueryData contains the query data passed to the contract
	QueryData []byte `protobuf:"bytes,2,opt,name=query_data,json=queryData,proto3" json:"query_data,omitempty"`
}

func (x *QuerySmartContractStateRequest) Reset() {
	*x = QuerySmartContractStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySmartContractStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySmartContractStateRequest) ProtoMessage() {}

func (x *QuerySmartContractStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySmartContractStateRequest.ProtoReflect.Descriptor instead.
func (*QuerySmartContractStateRequest) Descriptor() ([]byte, []int) {
	return file_cosmwasm_wasm_v1_query_proto_rawDescGZIP(), []int{10}
}

func (x *QuerySmartContractStateRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *QuerySmartContractStateRequest) GetQueryData() []byte {
	if x != nil {
		return x.QueryData
	}
	return nil
}

// QuerySmartContractStateResponse is the response type for the
// Query/SmartContractState RPC method
type QuerySmartContractStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data contains the json data returned from the smart contract
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QuerySmartContractStateResponse) Reset() {
	*x = QuerySmartContractStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySmartContractStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySmartContractStateResponse) ProtoMessage() {}

func (x *QuerySmartContractStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySmartContractStateResponse.ProtoReflect.Descriptor instead.
func (*QuerySmartContractStateResponse) Descriptor() ([]byte, []int) {
	return file_cosmwasm_wasm_v1_query_proto_rawDescGZIP(), []int{11}
}

func (x *QuerySmartContractStateResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// QueryCodeRequest is the request type for the Query/Code RPC method
type QueryCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeId uint64 `protobuf:"varint,1,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"` // grpc-gateway_out does not support Go style CodID
}

func (x *QueryCodeRequest) Reset() {
	*x = QueryCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCodeRequest) ProtoMessage() {}

func (x *QueryCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCodeRequest.ProtoReflect.Descriptor instead.
func (*QueryCodeRequest) Descriptor() ([]byte, []int) {
	return file_cosmwasm_wasm_v1_query_proto_rawDescGZIP(), []int{12}
}

func (x *QueryCodeRequest) GetCodeId() uint64 {
	if x != nil {
		return x.CodeId
	}
	return 0
}

// CodeInfoResponse contains code meta data from CodeInfo
type CodeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeId                uint64        `protobuf:"varint,1,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"` // id for legacy support
	Creator               string        `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	DataHash              []byte        `protobuf:"bytes,3,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	InstantiatePermission *AccessConfig `protobuf:"bytes,6,opt,name=instantiate_permission,json=instantiatePermission,proto3" json:"instantiate_permission,omitempty"`
}

func (x *CodeInfoResponse) Reset() {
	*x = CodeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeInfoResponse) ProtoMessage() {}

func (x *CodeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeInfoResponse.ProtoReflect.Descriptor instead.
func (*CodeInfoResponse) Descriptor() ([]byte, []int) {
	return file_cosmwasm_wasm_v1_query_proto_rawDescGZIP(), []int{13}
}

func (x *CodeInfoResponse) GetCodeId() uint64 {
	if x != nil {
		return x.CodeId
	}
	return 0
}

func (x *CodeInfoResponse) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CodeInfoResponse) GetDataHash() []byte {
	if x != nil {
		return x.DataHash
	}
	return nil
}

func (x *CodeInfoResponse) GetInstantiatePermission() *AccessConfig {
	if x != nil {
		return x.InstantiatePermission
	}
	return nil
}

// QueryCodeResponse is the response type for the Query/Code RPC method
type QueryCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeInfo *CodeInfoResponse `protobuf:"bytes,1,opt,name=code_info,json=codeInfo,proto3" json:"code_info,omitempty"`
	Data     []byte            `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryCodeResponse) Reset() {
	*x = QueryCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCodeResponse) ProtoMessage() {}

func (x *QueryCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCodeResponse.ProtoReflect.Descriptor instead.
func (*QueryCodeResponse) Descriptor() ([]byte, []int) {
	return file_cosmwasm_wasm_v1_query_proto_rawDescGZIP(), []int{14}
}

func (x *QueryCodeResponse) GetCodeInfo() *CodeInfoResponse {
	if x != nil {
		return x.CodeInfo
	}
	return nil
}

func (x *QueryCodeResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// QueryCodesRequest is the request type for the Query/Codes RPC method
type QueryCodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryCodesRequest) Reset() {
	*x = QueryCodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCodesRequest) ProtoMessage() {}

func (x *QueryCodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCodesRequest.ProtoReflect.Descriptor instead.
func (*QueryCodesRequest) Descriptor() ([]byte, []int) {
	return file_cosmwasm_wasm_v1_query_proto_rawDescGZIP(), []int{15}
}

func (x *QueryCodesRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryCodesResponse is the response type for the Query/Codes RPC method
type QueryCodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeInfos []*CodeInfoResponse `protobuf:"bytes,1,rep,name=code_infos,json=codeInfos,proto3" json:"code_infos,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryCodesResponse) Reset() {
	*x = QueryCodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCodesResponse) ProtoMessage() {}

func (x *QueryCodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCodesResponse.ProtoReflect.Descriptor instead.
func (*QueryCodesResponse) Descriptor() ([]byte, []int) {
	return file_cosmwasm_wasm_v1_query_proto_rawDescGZIP(), []int{16}
}

func (x *QueryCodesResponse) GetCodeInfos() []*CodeInfoResponse {
	if x != nil {
		return x.CodeInfos
	}
	return nil
}

func (x *QueryCodesResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryPinnedCodesRequest is the request type for the Query/PinnedCodes
// RPC method
type QueryPinnedCodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryPinnedCodesRequest) Reset() {
	*x = QueryPinnedCodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPinnedCodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPinnedCodesRequest) ProtoMessage() {}

func (x *QueryPinnedCodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPinnedCodesRequest.ProtoReflect.Descriptor instead.
func (*QueryPinnedCodesRequest) Descriptor() ([]byte, []int) {
	return file_cosmwasm_wasm_v1_query_proto_rawDescGZIP(), []int{17}
}

func (x *QueryPinnedCodesRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryPinnedCodesResponse is the response type for the
// Query/PinnedCodes RPC method
type QueryPinnedCodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeIds []uint64 `protobuf:"varint,1,rep,packed,name=code_ids,json=codeIds,proto3" json:"code_ids,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryPinnedCodesResponse) Reset() {
	*x = QueryPinnedCodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPinnedCodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPinnedCodesResponse) ProtoMessage() {}

func (x *QueryPinnedCodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cosmwasm_wasm_v1_query_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPinnedCodesResponse.ProtoReflect.Descriptor instead.
func (*QueryPinnedCodesResponse) Descriptor() ([]byte, []int) {
	return file_cosmwasm_wasm_v1_query_proto_rawDescGZIP(), []int{18}
}

func (x *QueryPinnedCodesResponse) GetCodeIds() []uint64 {
	if x != nil {
		return x.CodeIds
	}
	return nil
}

func (x *QueryPinnedCodesResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

var File_cosmwasm_wasm_v1_query_proto protoreflect.FileDescriptor

var file_cosmwasm_wasm_v1_query_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2f, 0x77, 0x61, 0x73, 0x6d, 0x2f,
	0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31,
	0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d,
	0x2f, 0x77, 0x61, 0x73, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34,
	0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77,
	0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xd0, 0xde, 0x1f, 0x01, 0xea, 0xde, 0x1f,
	0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x3a,
	0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0x7f, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x46,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb3, 0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77,
	0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x1b,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a,
	0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x1c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x33, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x77, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x16, 0xfa, 0xde, 0x1f, 0x12, 0x52, 0x61, 0x77,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x4d, 0x0a, 0x1f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x16, 0xfa, 0xde, 0x1f,
	0x12, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x10, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x63, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x9d, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x10, 0xe2, 0xde,
	0x1f, 0x06, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x44, 0xea, 0xde, 0x1f, 0x02, 0x69, 0x64, 0x52, 0x06,
	0x63, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x55, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x38, 0xfa, 0xde, 0x1f, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2f, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x12, 0x5b, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61,
	0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x15, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x09,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x08, 0xd0, 0xde, 0x1f, 0x01, 0xea, 0xde, 0x1f, 0x00, 0x52, 0x08, 0x63,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0x5b, 0x0a, 0x11, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77,
	0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x09, 0x63,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x61, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x42, 0x0f, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x07, 0x43, 0x6f, 0x64,
	0x65, 0x49, 0x44, 0x73, 0x52, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x12, 0x47, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x89, 0x0b, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x95, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x26, 0x12, 0x24, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2f, 0x77, 0x61,
	0x73, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x7b,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x12, 0xa6, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2d, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2f, 0x77,
	0x61, 0x73, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f,
	0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0xa4, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d,
	0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e,
	0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2f, 0x77, 0x61, 0x73, 0x6d, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x2f, 0x7b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x10, 0x41, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73,
	0x6d, 0x2f, 0x77, 0x61, 0x73, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x10, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61,
	0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61,
	0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37,
	0x12, 0x35, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2f, 0x77, 0x61, 0x73, 0x6d,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x7b, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x72, 0x61, 0x77, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x7d, 0x12, 0xba, 0x01, 0x0a, 0x12, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2f, 0x77, 0x61, 0x73, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x7d, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x7d, 0x12, 0x79, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2f, 0x77, 0x61, 0x73, 0x6d, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x7b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0x72, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77,
	0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2f, 0x77, 0x61, 0x73, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77,
	0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x12, 0x1e, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2f, 0x77, 0x61,
	0x73, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x70, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x42, 0x30, 0xc8, 0xe1, 0x1e, 0x00, 0xa8, 0xe2, 0x1e, 0x00, 0x5a, 0x26, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f, 0x73, 0x6d, 0x57, 0x61, 0x73,
	0x6d, 0x2f, 0x77, 0x61, 0x73, 0x6d, 0x64, 0x2f, 0x78, 0x2f, 0x77, 0x61, 0x73, 0x6d, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cosmwasm_wasm_v1_query_proto_rawDescOnce sync.Once
	file_cosmwasm_wasm_v1_query_proto_rawDescData = file_cosmwasm_wasm_v1_query_proto_rawDesc
)

func file_cosmwasm_wasm_v1_query_proto_rawDescGZIP() []byte {
	file_cosmwasm_wasm_v1_query_proto_rawDescOnce.Do(func() {
		file_cosmwasm_wasm_v1_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_cosmwasm_wasm_v1_query_proto_rawDescData)
	})
	return file_cosmwasm_wasm_v1_query_proto_rawDescData
}

var file_cosmwasm_wasm_v1_query_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_cosmwasm_wasm_v1_query_proto_goTypes = []interface{}{
	(*QueryContractInfoRequest)(nil),        // 0: cosmwasm.wasm.v1.QueryContractInfoRequest
	(*QueryContractInfoResponse)(nil),       // 1: cosmwasm.wasm.v1.QueryContractInfoResponse
	(*QueryContractHistoryRequest)(nil),     // 2: cosmwasm.wasm.v1.QueryContractHistoryRequest
	(*QueryContractHistoryResponse)(nil),    // 3: cosmwasm.wasm.v1.QueryContractHistoryResponse
	(*QueryContractsByCodeRequest)(nil),     // 4: cosmwasm.wasm.v1.QueryContractsByCodeRequest
	(*QueryContractsByCodeResponse)(nil),    // 5: cosmwasm.wasm.v1.QueryContractsByCodeResponse
	(*QueryAllContractStateRequest)(nil),    // 6: cosmwasm.wasm.v1.QueryAllContractStateRequest
	(*QueryAllContractStateResponse)(nil),   // 7: cosmwasm.wasm.v1.QueryAllContractStateResponse
	(*QueryRawContractStateRequest)(nil),    // 8: cosmwasm.wasm.v1.QueryRawContractStateRequest
	(*QueryRawContractStateResponse)(nil),   // 9: cosmwasm.wasm.v1.QueryRawContractStateResponse
	(*QuerySmartContractStateRequest)(nil),  // 10: cosmwasm.wasm.v1.QuerySmartContractStateRequest
	(*QuerySmartContractStateResponse)(nil), // 11: cosmwasm.wasm.v1.QuerySmartContractStateResponse
	(*QueryCodeRequest)(nil),                // 12: cosmwasm.wasm.v1.QueryCodeRequest
	(*CodeInfoResponse)(nil),                // 13: cosmwasm.wasm.v1.CodeInfoResponse
	(*QueryCodeResponse)(nil),               // 14: cosmwasm.wasm.v1.QueryCodeResponse
	(*QueryCodesRequest)(nil),               // 15: cosmwasm.wasm.v1.QueryCodesRequest
	(*QueryCodesResponse)(nil),              // 16: cosmwasm.wasm.v1.QueryCodesResponse
	(*QueryPinnedCodesRequest)(nil),         // 17: cosmwasm.wasm.v1.QueryPinnedCodesRequest
	(*QueryPinnedCodesResponse)(nil),        // 18: cosmwasm.wasm.v1.QueryPinnedCodesResponse
	(*ContractInfo)(nil),                    // 19: cosmwasm.wasm.v1.ContractInfo
	(*query.PageRequest)(nil),               // 20: cosmos.base.query.v1beta1.PageRequest
	(*ContractCodeHistoryEntry)(nil),        // 21: cosmwasm.wasm.v1.ContractCodeHistoryEntry
	(*query.PageResponse)(nil),              // 22: cosmos.base.query.v1beta1.PageResponse
	(*Model)(nil),                           // 23: cosmwasm.wasm.v1.Model
	(*AccessConfig)(nil),                    // 24: cosmwasm.wasm.v1.AccessConfig
}
var file_cosmwasm_wasm_v1_query_proto_depIdxs = []int32{
	19, // 0: cosmwasm.wasm.v1.QueryContractInfoResponse.contract_info:type_name -> cosmwasm.wasm.v1.ContractInfo
	20, // 1: cosmwasm.wasm.v1.QueryContractHistoryRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	21, // 2: cosmwasm.wasm.v1.QueryContractHistoryResponse.entries:type_name -> cosmwasm.wasm.v1.ContractCodeHistoryEntry
	22, // 3: cosmwasm.wasm.v1.QueryContractHistoryResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	20, // 4: cosmwasm.wasm.v1.QueryContractsByCodeRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	22, // 5: cosmwasm.wasm.v1.QueryContractsByCodeResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	20, // 6: cosmwasm.wasm.v1.QueryAllContractStateRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	23, // 7: cosmwasm.wasm.v1.QueryAllContractStateResponse.models:type_name -> cosmwasm.wasm.v1.Model
	22, // 8: cosmwasm.wasm.v1.QueryAllContractStateResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	24, // 9: cosmwasm.wasm.v1.CodeInfoResponse.instantiate_permission:type_name -> cosmwasm.wasm.v1.AccessConfig
	13, // 10: cosmwasm.wasm.v1.QueryCodeResponse.code_info:type_name -> cosmwasm.wasm.v1.CodeInfoResponse
	20, // 11: cosmwasm.wasm.v1.QueryCodesRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	13, // 12: cosmwasm.wasm.v1.QueryCodesResponse.code_infos:type_name -> cosmwasm.wasm.v1.CodeInfoResponse
	22, // 13: cosmwasm.wasm.v1.QueryCodesResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	20, // 14: cosmwasm.wasm.v1.QueryPinnedCodesRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	22, // 15: cosmwasm.wasm.v1.QueryPinnedCodesResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	0,  // 16: cosmwasm.wasm.v1.Query.ContractInfo:input_type -> cosmwasm.wasm.v1.QueryContractInfoRequest
	2,  // 17: cosmwasm.wasm.v1.Query.ContractHistory:input_type -> cosmwasm.wasm.v1.QueryContractHistoryRequest
	4,  // 18: cosmwasm.wasm.v1.Query.ContractsByCode:input_type -> cosmwasm.wasm.v1.QueryContractsByCodeRequest
	6,  // 19: cosmwasm.wasm.v1.Query.AllContractState:input_type -> cosmwasm.wasm.v1.QueryAllContractStateRequest
	8,  // 20: cosmwasm.wasm.v1.Query.RawContractState:input_type -> cosmwasm.wasm.v1.QueryRawContractStateRequest
	10, // 21: cosmwasm.wasm.v1.Query.SmartContractState:input_type -> cosmwasm.wasm.v1.QuerySmartContractStateRequest
	12, // 22: cosmwasm.wasm.v1.Query.Code:input_type -> cosmwasm.wasm.v1.QueryCodeRequest
	15, // 23: cosmwasm.wasm.v1.Query.Codes:input_type -> cosmwasm.wasm.v1.QueryCodesRequest
	17, // 24: cosmwasm.wasm.v1.Query.PinnedCodes:input_type -> cosmwasm.wasm.v1.QueryPinnedCodesRequest
	1,  // 25: cosmwasm.wasm.v1.Query.ContractInfo:output_type -> cosmwasm.wasm.v1.QueryContractInfoResponse
	3,  // 26: cosmwasm.wasm.v1.Query.ContractHistory:output_type -> cosmwasm.wasm.v1.QueryContractHistoryResponse
	5,  // 27: cosmwasm.wasm.v1.Query.ContractsByCode:output_type -> cosmwasm.wasm.v1.QueryContractsByCodeResponse
	7,  // 28: cosmwasm.wasm.v1.Query.AllContractState:output_type -> cosmwasm.wasm.v1.QueryAllContractStateResponse
	9,  // 29: cosmwasm.wasm.v1.Query.RawContractState:output_type -> cosmwasm.wasm.v1.QueryRawContractStateResponse
	11, // 30: cosmwasm.wasm.v1.Query.SmartContractState:output_type -> cosmwasm.wasm.v1.QuerySmartContractStateResponse
	14, // 31: cosmwasm.wasm.v1.Query.Code:output_type -> cosmwasm.wasm.v1.QueryCodeResponse
	16, // 32: cosmwasm.wasm.v1.Query.Codes:output_type -> cosmwasm.wasm.v1.QueryCodesResponse
	18, // 33: cosmwasm.wasm.v1.Query.PinnedCodes:output_type -> cosmwasm.wasm.v1.QueryPinnedCodesResponse
	25, // [25:34] is the sub-list for method output_type
	16, // [16:25] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_cosmwasm_wasm_v1_query_proto_init() }
func file_cosmwasm_wasm_v1_query_proto_init() {
	if File_cosmwasm_wasm_v1_query_proto != nil {
		return
	}
	file_cosmwasm_wasm_v1_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cosmwasm_wasm_v1_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryContractInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmwasm_wasm_v1_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryContractInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmwasm_wasm_v1_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryContractHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmwasm_wasm_v1_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryContractHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmwasm_wasm_v1_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryContractsByCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmwasm_wasm_v1_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryContractsByCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmwasm_wasm_v1_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllContractStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmwasm_wasm_v1_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllContractStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmwasm_wasm_v1_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRawContractStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmwasm_wasm_v1_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRawContractStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmwasm_wasm_v1_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySmartContractStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmwasm_wasm_v1_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySmartContractStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmwasm_wasm_v1_query_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmwasm_wasm_v1_query_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmwasm_wasm_v1_query_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmwasm_wasm_v1_query_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmwasm_wasm_v1_query_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmwasm_wasm_v1_query_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPinnedCodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmwasm_wasm_v1_query_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPinnedCodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cosmwasm_wasm_v1_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cosmwasm_wasm_v1_query_proto_goTypes,
		DependencyIndexes: file_cosmwasm_wasm_v1_query_proto_depIdxs,
		MessageInfos:      file_cosmwasm_wasm_v1_query_proto_msgTypes,
	}.Build()
	File_cosmwasm_wasm_v1_query_proto = out.File
	file_cosmwasm_wasm_v1_query_proto_rawDesc = nil
	file_cosmwasm_wasm_v1_query_proto_goTypes = nil
	file_cosmwasm_wasm_v1_query_proto_depIdxs = nil
}
