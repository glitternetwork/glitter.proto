// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0-devel
// 	protoc        v3.14.0
// source: ibc/lightclients/solomachine/v2/solomachine.proto

package types

import (
	types "github.com/cosmos/ibc-go/v3/modules/core/03-connection/types"
	types1 "github.com/cosmos/ibc-go/v3/modules/core/04-channel/types"
	_ "github.com/gogo/protobuf/gogoproto"
	any1 "github.com/golang/protobuf/ptypes/any"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DataType defines the type of solo machine proof being created. This is done
// to preserve uniqueness of different data sign byte encodings.
type DataType int32

const (
	// Default State
	DataType_DATA_TYPE_UNINITIALIZED_UNSPECIFIED DataType = 0
	// Data type for client state verification
	DataType_DATA_TYPE_CLIENT_STATE DataType = 1
	// Data type for consensus state verification
	DataType_DATA_TYPE_CONSENSUS_STATE DataType = 2
	// Data type for connection state verification
	DataType_DATA_TYPE_CONNECTION_STATE DataType = 3
	// Data type for channel state verification
	DataType_DATA_TYPE_CHANNEL_STATE DataType = 4
	// Data type for packet commitment verification
	DataType_DATA_TYPE_PACKET_COMMITMENT DataType = 5
	// Data type for packet acknowledgement verification
	DataType_DATA_TYPE_PACKET_ACKNOWLEDGEMENT DataType = 6
	// Data type for packet receipt absence verification
	DataType_DATA_TYPE_PACKET_RECEIPT_ABSENCE DataType = 7
	// Data type for next sequence recv verification
	DataType_DATA_TYPE_NEXT_SEQUENCE_RECV DataType = 8
	// Data type for header verification
	DataType_DATA_TYPE_HEADER DataType = 9
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0: "DATA_TYPE_UNINITIALIZED_UNSPECIFIED",
		1: "DATA_TYPE_CLIENT_STATE",
		2: "DATA_TYPE_CONSENSUS_STATE",
		3: "DATA_TYPE_CONNECTION_STATE",
		4: "DATA_TYPE_CHANNEL_STATE",
		5: "DATA_TYPE_PACKET_COMMITMENT",
		6: "DATA_TYPE_PACKET_ACKNOWLEDGEMENT",
		7: "DATA_TYPE_PACKET_RECEIPT_ABSENCE",
		8: "DATA_TYPE_NEXT_SEQUENCE_RECV",
		9: "DATA_TYPE_HEADER",
	}
	DataType_value = map[string]int32{
		"DATA_TYPE_UNINITIALIZED_UNSPECIFIED": 0,
		"DATA_TYPE_CLIENT_STATE":              1,
		"DATA_TYPE_CONSENSUS_STATE":           2,
		"DATA_TYPE_CONNECTION_STATE":          3,
		"DATA_TYPE_CHANNEL_STATE":             4,
		"DATA_TYPE_PACKET_COMMITMENT":         5,
		"DATA_TYPE_PACKET_ACKNOWLEDGEMENT":    6,
		"DATA_TYPE_PACKET_RECEIPT_ABSENCE":    7,
		"DATA_TYPE_NEXT_SEQUENCE_RECV":        8,
		"DATA_TYPE_HEADER":                    9,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_ibc_lightclients_solomachine_v2_solomachine_proto_enumTypes[0].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_ibc_lightclients_solomachine_v2_solomachine_proto_enumTypes[0]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescGZIP(), []int{0}
}

// ClientState defines a solo machine client that tracks the current consensus
// state and if the client is frozen.
type ClientState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// latest sequence of the client state
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// frozen sequence of the solo machine
	IsFrozen       bool            `protobuf:"varint,2,opt,name=is_frozen,json=isFrozen,proto3" json:"is_frozen,omitempty"`
	ConsensusState *ConsensusState `protobuf:"bytes,3,opt,name=consensus_state,json=consensusState,proto3" json:"consensus_state,omitempty"`
	// when set to true, will allow governance to update a solo machine client.
	// The client will be unfrozen if it is frozen.
	AllowUpdateAfterProposal bool `protobuf:"varint,4,opt,name=allow_update_after_proposal,json=allowUpdateAfterProposal,proto3" json:"allow_update_after_proposal,omitempty"`
}

func (x *ClientState) Reset() {
	*x = ClientState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientState) ProtoMessage() {}

func (x *ClientState) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientState.ProtoReflect.Descriptor instead.
func (*ClientState) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescGZIP(), []int{0}
}

func (x *ClientState) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ClientState) GetIsFrozen() bool {
	if x != nil {
		return x.IsFrozen
	}
	return false
}

func (x *ClientState) GetConsensusState() *ConsensusState {
	if x != nil {
		return x.ConsensusState
	}
	return nil
}

func (x *ClientState) GetAllowUpdateAfterProposal() bool {
	if x != nil {
		return x.AllowUpdateAfterProposal
	}
	return false
}

// ConsensusState defines a solo machine consensus state. The sequence of a
// consensus state is contained in the "height" key used in storing the
// consensus state.
type ConsensusState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// public key of the solo machine
	PublicKey *any1.Any `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// diversifier allows the same public key to be re-used across different solo
	// machine clients (potentially on different chains) without being considered
	// misbehaviour.
	Diversifier string `protobuf:"bytes,2,opt,name=diversifier,proto3" json:"diversifier,omitempty"`
	Timestamp   uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ConsensusState) Reset() {
	*x = ConsensusState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusState) ProtoMessage() {}

func (x *ConsensusState) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusState.ProtoReflect.Descriptor instead.
func (*ConsensusState) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescGZIP(), []int{1}
}

func (x *ConsensusState) GetPublicKey() *any1.Any {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *ConsensusState) GetDiversifier() string {
	if x != nil {
		return x.Diversifier
	}
	return ""
}

func (x *ConsensusState) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Header defines a solo machine consensus header
type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequence to update solo machine public key at
	Sequence       uint64    `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Timestamp      uint64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature      []byte    `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	NewPublicKey   *any1.Any `protobuf:"bytes,4,opt,name=new_public_key,json=newPublicKey,proto3" json:"new_public_key,omitempty"`
	NewDiversifier string    `protobuf:"bytes,5,opt,name=new_diversifier,json=newDiversifier,proto3" json:"new_diversifier,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescGZIP(), []int{2}
}

func (x *Header) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Header) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Header) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Header) GetNewPublicKey() *any1.Any {
	if x != nil {
		return x.NewPublicKey
	}
	return nil
}

func (x *Header) GetNewDiversifier() string {
	if x != nil {
		return x.NewDiversifier
	}
	return ""
}

// Misbehaviour defines misbehaviour for a solo machine which consists
// of a sequence and two signatures over different messages at that sequence.
type Misbehaviour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string            `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Sequence     uint64            `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	SignatureOne *SignatureAndData `protobuf:"bytes,3,opt,name=signature_one,json=signatureOne,proto3" json:"signature_one,omitempty"`
	SignatureTwo *SignatureAndData `protobuf:"bytes,4,opt,name=signature_two,json=signatureTwo,proto3" json:"signature_two,omitempty"`
}

func (x *Misbehaviour) Reset() {
	*x = Misbehaviour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Misbehaviour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Misbehaviour) ProtoMessage() {}

func (x *Misbehaviour) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Misbehaviour.ProtoReflect.Descriptor instead.
func (*Misbehaviour) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescGZIP(), []int{3}
}

func (x *Misbehaviour) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Misbehaviour) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Misbehaviour) GetSignatureOne() *SignatureAndData {
	if x != nil {
		return x.SignatureOne
	}
	return nil
}

func (x *Misbehaviour) GetSignatureTwo() *SignatureAndData {
	if x != nil {
		return x.SignatureTwo
	}
	return nil
}

// SignatureAndData contains a signature and the data signed over to create that
// signature.
type SignatureAndData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte   `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	DataType  DataType `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3,enum=ibc.lightclients.solomachine.v2.DataType" json:"data_type,omitempty"`
	Data      []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Timestamp uint64   `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *SignatureAndData) Reset() {
	*x = SignatureAndData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureAndData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureAndData) ProtoMessage() {}

func (x *SignatureAndData) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureAndData.ProtoReflect.Descriptor instead.
func (*SignatureAndData) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescGZIP(), []int{4}
}

func (x *SignatureAndData) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignatureAndData) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_DATA_TYPE_UNINITIALIZED_UNSPECIFIED
}

func (x *SignatureAndData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SignatureAndData) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// TimestampedSignatureData contains the signature data and the timestamp of the
// signature.
type TimestampedSignatureData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignatureData []byte `protobuf:"bytes,1,opt,name=signature_data,json=signatureData,proto3" json:"signature_data,omitempty"`
	Timestamp     uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TimestampedSignatureData) Reset() {
	*x = TimestampedSignatureData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampedSignatureData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampedSignatureData) ProtoMessage() {}

func (x *TimestampedSignatureData) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampedSignatureData.ProtoReflect.Descriptor instead.
func (*TimestampedSignatureData) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescGZIP(), []int{5}
}

func (x *TimestampedSignatureData) GetSignatureData() []byte {
	if x != nil {
		return x.SignatureData
	}
	return nil
}

func (x *TimestampedSignatureData) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// SignBytes defines the signed bytes used for signature verification.
type SignBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence    uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Timestamp   uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Diversifier string `protobuf:"bytes,3,opt,name=diversifier,proto3" json:"diversifier,omitempty"`
	// type of the data used
	DataType DataType `protobuf:"varint,4,opt,name=data_type,json=dataType,proto3,enum=ibc.lightclients.solomachine.v2.DataType" json:"data_type,omitempty"`
	// marshaled data
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SignBytes) Reset() {
	*x = SignBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignBytes) ProtoMessage() {}

func (x *SignBytes) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignBytes.ProtoReflect.Descriptor instead.
func (*SignBytes) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescGZIP(), []int{6}
}

func (x *SignBytes) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *SignBytes) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SignBytes) GetDiversifier() string {
	if x != nil {
		return x.Diversifier
	}
	return ""
}

func (x *SignBytes) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_DATA_TYPE_UNINITIALIZED_UNSPECIFIED
}

func (x *SignBytes) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// HeaderData returns the SignBytes data for update verification.
type HeaderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// header public key
	NewPubKey *any1.Any `protobuf:"bytes,1,opt,name=new_pub_key,json=newPubKey,proto3" json:"new_pub_key,omitempty"`
	// header diversifier
	NewDiversifier string `protobuf:"bytes,2,opt,name=new_diversifier,json=newDiversifier,proto3" json:"new_diversifier,omitempty"`
}

func (x *HeaderData) Reset() {
	*x = HeaderData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderData) ProtoMessage() {}

func (x *HeaderData) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderData.ProtoReflect.Descriptor instead.
func (*HeaderData) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescGZIP(), []int{7}
}

func (x *HeaderData) GetNewPubKey() *any1.Any {
	if x != nil {
		return x.NewPubKey
	}
	return nil
}

func (x *HeaderData) GetNewDiversifier() string {
	if x != nil {
		return x.NewDiversifier
	}
	return ""
}

// ClientStateData returns the SignBytes data for client state verification.
type ClientStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path        []byte    `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	ClientState *any1.Any `protobuf:"bytes,2,opt,name=client_state,json=clientState,proto3" json:"client_state,omitempty"`
}

func (x *ClientStateData) Reset() {
	*x = ClientStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientStateData) ProtoMessage() {}

func (x *ClientStateData) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientStateData.ProtoReflect.Descriptor instead.
func (*ClientStateData) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescGZIP(), []int{8}
}

func (x *ClientStateData) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ClientStateData) GetClientState() *any1.Any {
	if x != nil {
		return x.ClientState
	}
	return nil
}

// ConsensusStateData returns the SignBytes data for consensus state
// verification.
type ConsensusStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path           []byte    `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	ConsensusState *any1.Any `protobuf:"bytes,2,opt,name=consensus_state,json=consensusState,proto3" json:"consensus_state,omitempty"`
}

func (x *ConsensusStateData) Reset() {
	*x = ConsensusStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusStateData) ProtoMessage() {}

func (x *ConsensusStateData) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusStateData.ProtoReflect.Descriptor instead.
func (*ConsensusStateData) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescGZIP(), []int{9}
}

func (x *ConsensusStateData) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ConsensusStateData) GetConsensusState() *any1.Any {
	if x != nil {
		return x.ConsensusState
	}
	return nil
}

// ConnectionStateData returns the SignBytes data for connection state
// verification.
type ConnectionStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       []byte               `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Connection *types.ConnectionEnd `protobuf:"bytes,2,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *ConnectionStateData) Reset() {
	*x = ConnectionStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionStateData) ProtoMessage() {}

func (x *ConnectionStateData) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionStateData.ProtoReflect.Descriptor instead.
func (*ConnectionStateData) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescGZIP(), []int{10}
}

func (x *ConnectionStateData) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ConnectionStateData) GetConnection() *types.ConnectionEnd {
	if x != nil {
		return x.Connection
	}
	return nil
}

// ChannelStateData returns the SignBytes data for channel state
// verification.
type ChannelStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path    []byte          `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Channel *types1.Channel `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *ChannelStateData) Reset() {
	*x = ChannelStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStateData) ProtoMessage() {}

func (x *ChannelStateData) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStateData.ProtoReflect.Descriptor instead.
func (*ChannelStateData) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescGZIP(), []int{11}
}

func (x *ChannelStateData) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ChannelStateData) GetChannel() *types1.Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

// PacketCommitmentData returns the SignBytes data for packet commitment
// verification.
type PacketCommitmentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       []byte `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Commitment []byte `protobuf:"bytes,2,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (x *PacketCommitmentData) Reset() {
	*x = PacketCommitmentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketCommitmentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketCommitmentData) ProtoMessage() {}

func (x *PacketCommitmentData) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketCommitmentData.ProtoReflect.Descriptor instead.
func (*PacketCommitmentData) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescGZIP(), []int{12}
}

func (x *PacketCommitmentData) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *PacketCommitmentData) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

// PacketAcknowledgementData returns the SignBytes data for acknowledgement
// verification.
type PacketAcknowledgementData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path            []byte `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Acknowledgement []byte `protobuf:"bytes,2,opt,name=acknowledgement,proto3" json:"acknowledgement,omitempty"`
}

func (x *PacketAcknowledgementData) Reset() {
	*x = PacketAcknowledgementData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketAcknowledgementData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketAcknowledgementData) ProtoMessage() {}

func (x *PacketAcknowledgementData) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketAcknowledgementData.ProtoReflect.Descriptor instead.
func (*PacketAcknowledgementData) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescGZIP(), []int{13}
}

func (x *PacketAcknowledgementData) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *PacketAcknowledgementData) GetAcknowledgement() []byte {
	if x != nil {
		return x.Acknowledgement
	}
	return nil
}

// PacketReceiptAbsenceData returns the SignBytes data for
// packet receipt absence verification.
type PacketReceiptAbsenceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path []byte `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *PacketReceiptAbsenceData) Reset() {
	*x = PacketReceiptAbsenceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketReceiptAbsenceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketReceiptAbsenceData) ProtoMessage() {}

func (x *PacketReceiptAbsenceData) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketReceiptAbsenceData.ProtoReflect.Descriptor instead.
func (*PacketReceiptAbsenceData) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescGZIP(), []int{14}
}

func (x *PacketReceiptAbsenceData) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

// NextSequenceRecvData returns the SignBytes data for verification of the next
// sequence to be received.
type NextSequenceRecvData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path        []byte `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	NextSeqRecv uint64 `protobuf:"varint,2,opt,name=next_seq_recv,json=nextSeqRecv,proto3" json:"next_seq_recv,omitempty"`
}

func (x *NextSequenceRecvData) Reset() {
	*x = NextSequenceRecvData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextSequenceRecvData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextSequenceRecvData) ProtoMessage() {}

func (x *NextSequenceRecvData) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextSequenceRecvData.ProtoReflect.Descriptor instead.
func (*NextSequenceRecvData) Descriptor() ([]byte, []int) {
	return file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescGZIP(), []int{15}
}

func (x *NextSequenceRecvData) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *NextSequenceRecvData) GetNextSeqRecv() uint64 {
	if x != nil {
		return x.NextSeqRecv
	}
	return 0
}

var File_ibc_lightclients_solomachine_v2_solomachine_proto protoreflect.FileDescriptor

var file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDesc = []byte{
	0x0a, 0x31, 0x69, 0x62, 0x63, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2f, 0x76,
	0x32, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x69, 0x62, 0x63, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x32, 0x1a, 0x27, 0x69, 0x62, 0x63, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x69,
	0x62, 0x63, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xbf, 0x02, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x14, 0xf2, 0xde, 0x1f, 0x10, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x69, 0x73, 0x5f, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x22, 0x52, 0x08, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x12, 0x74, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x62, 0x63, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x1a, 0xf2, 0xde, 0x1f, 0x16,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x65, 0x0a, 0x1b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x26, 0xf2, 0xde, 0x1f,
	0x22, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x22, 0x52, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x3a, 0x04, 0x88,
	0xa0, 0x1f, 0x00, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x42, 0x15, 0xf2, 0xde, 0x1f, 0x11, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0x82, 0x02, 0x0a, 0x06, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x6e,
	0x65, 0x77, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x19, 0xf2, 0xde, 0x1f, 0x15, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x22, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x43, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xf2, 0xde, 0x1f,
	0x16, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x44, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0xc7, 0x02,
	0x0a, 0x0c, 0x4d, 0x69, 0x73, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x12, 0x31,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0xf2, 0xde, 0x1f, 0x10, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x70, 0x0a,
	0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x41, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x18, 0xf2, 0xde, 0x1f, 0x14, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x6e, 0x65,
	0x22, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x6e, 0x65, 0x12,
	0x70, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x77, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x41, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x18, 0xf2, 0xde, 0x1f, 0x14, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74,
	0x77, 0x6f, 0x22, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x77,
	0x6f, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0xc6, 0x01, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x5c, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x69, 0x62, 0x63, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x32, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x42, 0x14, 0xf2, 0xde, 0x1f, 0x10, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00,
	0x22, 0x80, 0x01, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a,
	0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x19, 0xf2, 0xde, 0x1f, 0x15, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x3a, 0x04, 0x88,
	0xa0, 0x1f, 0x00, 0x22, 0xdf, 0x01, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5c, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x42, 0x14, 0xf2, 0xde, 0x1f,
	0x10, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a,
	0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0xa5, 0x01, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x75, 0x62, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42,
	0x16, 0xf2, 0xde, 0x1f, 0x12, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6e, 0x65, 0x77, 0x5f, 0x70,
	0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x12, 0x43, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xf2, 0xde, 0x1f,
	0x16, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x44, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0x7d, 0x0a,
	0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x50, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x42, 0x17, 0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0x89, 0x01, 0x0a,
	0x12, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x59, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x1a, 0xf2, 0xde, 0x1f, 0x16, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0x76, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00,
	0x22, 0x64, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x62, 0x63, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0x4a, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x59, 0x0a, 0x19, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x61, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x2e, 0x0a,
	0x18, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x62,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x68, 0x0a,
	0x14, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63,
	0x76, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x18, 0xf2, 0xde, 0x1f, 0x14, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x73, 0x65, 0x71, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x22, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74,
	0x53, 0x65, 0x71, 0x52, 0x65, 0x63, 0x76, 0x2a, 0x8c, 0x04, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x23, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x0f, 0x8a,
	0x9d, 0x20, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x12, 0x26,
	0x0a, 0x16, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x01, 0x1a, 0x0a, 0x8a, 0x9d, 0x20, 0x06,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x12, 0x2c, 0x0a, 0x19, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x1a, 0x0d, 0x8a, 0x9d, 0x20, 0x09, 0x43, 0x4f, 0x4e, 0x53, 0x45,
	0x4e, 0x53, 0x55, 0x53, 0x12, 0x2e, 0x0a, 0x1a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x03, 0x1a, 0x0e, 0x8a, 0x9d, 0x20, 0x0a, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x12, 0x28, 0x0a, 0x17, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10,
	0x04, 0x1a, 0x0b, 0x8a, 0x9d, 0x20, 0x07, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x12, 0x35,
	0x0a, 0x1b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x1a,
	0x14, 0x8a, 0x9d, 0x20, 0x10, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x54, 0x4d, 0x45, 0x4e, 0x54, 0x12, 0x3f, 0x0a, 0x20, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x4b, 0x4e, 0x4f, 0x57,
	0x4c, 0x45, 0x44, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x1a, 0x19, 0x8a, 0x9d, 0x20,
	0x15, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x41, 0x43, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44,
	0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x12, 0x3e, 0x0a, 0x20, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x50, 0x54, 0x5f, 0x41, 0x42, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x07, 0x1a, 0x18, 0x8a, 0x9d,
	0x20, 0x14, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x41,
	0x42, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x12, 0x36, 0x0a, 0x1c, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x52, 0x45, 0x43, 0x56, 0x10, 0x08, 0x1a, 0x14, 0x8a, 0x9d, 0x20, 0x10, 0x4e, 0x45,
	0x58, 0x54, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x52, 0x45, 0x43, 0x56, 0x12, 0x20,
	0x0a, 0x10, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44,
	0x45, 0x52, 0x10, 0x09, 0x1a, 0x0a, 0x8a, 0x9d, 0x20, 0x06, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52,
	0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42, 0x48, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x69, 0x62, 0x63, 0x2d,
	0x67, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x30, 0x36, 0x2d, 0x73,
	0x6f, 0x6c, 0x6f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescOnce sync.Once
	file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescData = file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDesc
)

func file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescGZIP() []byte {
	file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescOnce.Do(func() {
		file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescData = protoimpl.X.CompressGZIP(file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescData)
	})
	return file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDescData
}

var file_ibc_lightclients_solomachine_v2_solomachine_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_ibc_lightclients_solomachine_v2_solomachine_proto_goTypes = []interface{}{
	(DataType)(0),                     // 0: ibc.lightclients.solomachine.v2.DataType
	(*ClientState)(nil),               // 1: ibc.lightclients.solomachine.v2.ClientState
	(*ConsensusState)(nil),            // 2: ibc.lightclients.solomachine.v2.ConsensusState
	(*Header)(nil),                    // 3: ibc.lightclients.solomachine.v2.Header
	(*Misbehaviour)(nil),              // 4: ibc.lightclients.solomachine.v2.Misbehaviour
	(*SignatureAndData)(nil),          // 5: ibc.lightclients.solomachine.v2.SignatureAndData
	(*TimestampedSignatureData)(nil),  // 6: ibc.lightclients.solomachine.v2.TimestampedSignatureData
	(*SignBytes)(nil),                 // 7: ibc.lightclients.solomachine.v2.SignBytes
	(*HeaderData)(nil),                // 8: ibc.lightclients.solomachine.v2.HeaderData
	(*ClientStateData)(nil),           // 9: ibc.lightclients.solomachine.v2.ClientStateData
	(*ConsensusStateData)(nil),        // 10: ibc.lightclients.solomachine.v2.ConsensusStateData
	(*ConnectionStateData)(nil),       // 11: ibc.lightclients.solomachine.v2.ConnectionStateData
	(*ChannelStateData)(nil),          // 12: ibc.lightclients.solomachine.v2.ChannelStateData
	(*PacketCommitmentData)(nil),      // 13: ibc.lightclients.solomachine.v2.PacketCommitmentData
	(*PacketAcknowledgementData)(nil), // 14: ibc.lightclients.solomachine.v2.PacketAcknowledgementData
	(*PacketReceiptAbsenceData)(nil),  // 15: ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData
	(*NextSequenceRecvData)(nil),      // 16: ibc.lightclients.solomachine.v2.NextSequenceRecvData
	(*any1.Any)(nil),                  // 17: google.protobuf.Any
	(*types.ConnectionEnd)(nil),       // 18: ibc.core.connection.v1.ConnectionEnd
	(*types1.Channel)(nil),            // 19: ibc.core.channel.v1.Channel
}
var file_ibc_lightclients_solomachine_v2_solomachine_proto_depIdxs = []int32{
	2,  // 0: ibc.lightclients.solomachine.v2.ClientState.consensus_state:type_name -> ibc.lightclients.solomachine.v2.ConsensusState
	17, // 1: ibc.lightclients.solomachine.v2.ConsensusState.public_key:type_name -> google.protobuf.Any
	17, // 2: ibc.lightclients.solomachine.v2.Header.new_public_key:type_name -> google.protobuf.Any
	5,  // 3: ibc.lightclients.solomachine.v2.Misbehaviour.signature_one:type_name -> ibc.lightclients.solomachine.v2.SignatureAndData
	5,  // 4: ibc.lightclients.solomachine.v2.Misbehaviour.signature_two:type_name -> ibc.lightclients.solomachine.v2.SignatureAndData
	0,  // 5: ibc.lightclients.solomachine.v2.SignatureAndData.data_type:type_name -> ibc.lightclients.solomachine.v2.DataType
	0,  // 6: ibc.lightclients.solomachine.v2.SignBytes.data_type:type_name -> ibc.lightclients.solomachine.v2.DataType
	17, // 7: ibc.lightclients.solomachine.v2.HeaderData.new_pub_key:type_name -> google.protobuf.Any
	17, // 8: ibc.lightclients.solomachine.v2.ClientStateData.client_state:type_name -> google.protobuf.Any
	17, // 9: ibc.lightclients.solomachine.v2.ConsensusStateData.consensus_state:type_name -> google.protobuf.Any
	18, // 10: ibc.lightclients.solomachine.v2.ConnectionStateData.connection:type_name -> ibc.core.connection.v1.ConnectionEnd
	19, // 11: ibc.lightclients.solomachine.v2.ChannelStateData.channel:type_name -> ibc.core.channel.v1.Channel
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_ibc_lightclients_solomachine_v2_solomachine_proto_init() }
func file_ibc_lightclients_solomachine_v2_solomachine_proto_init() {
	if File_ibc_lightclients_solomachine_v2_solomachine_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Misbehaviour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureAndData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampedSignatureData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketCommitmentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketAcknowledgementData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketReceiptAbsenceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextSequenceRecvData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ibc_lightclients_solomachine_v2_solomachine_proto_goTypes,
		DependencyIndexes: file_ibc_lightclients_solomachine_v2_solomachine_proto_depIdxs,
		EnumInfos:         file_ibc_lightclients_solomachine_v2_solomachine_proto_enumTypes,
		MessageInfos:      file_ibc_lightclients_solomachine_v2_solomachine_proto_msgTypes,
	}.Build()
	File_ibc_lightclients_solomachine_v2_solomachine_proto = out.File
	file_ibc_lightclients_solomachine_v2_solomachine_proto_rawDesc = nil
	file_ibc_lightclients_solomachine_v2_solomachine_proto_goTypes = nil
	file_ibc_lightclients_solomachine_v2_solomachine_proto_depIdxs = nil
}
