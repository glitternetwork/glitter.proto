// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0-devel
// 	protoc        v3.14.0
// source: ibc/core/channel/v1/tx.proto

package types

import (
	types "github.com/cosmos/ibc-go/v3/modules/core/02-client/types"
	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ResponseResultType defines the possible outcomes of the execution of a message
type ResponseResultType int32

const (
	// Default zero value enumeration
	ResponseResultType_RESPONSE_RESULT_TYPE_UNSPECIFIED ResponseResultType = 0
	// The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
	ResponseResultType_RESPONSE_RESULT_TYPE_NOOP ResponseResultType = 1
	// The message was executed successfully
	ResponseResultType_RESPONSE_RESULT_TYPE_SUCCESS ResponseResultType = 2
)

// Enum value maps for ResponseResultType.
var (
	ResponseResultType_name = map[int32]string{
		0: "RESPONSE_RESULT_TYPE_UNSPECIFIED",
		1: "RESPONSE_RESULT_TYPE_NOOP",
		2: "RESPONSE_RESULT_TYPE_SUCCESS",
	}
	ResponseResultType_value = map[string]int32{
		"RESPONSE_RESULT_TYPE_UNSPECIFIED": 0,
		"RESPONSE_RESULT_TYPE_NOOP":        1,
		"RESPONSE_RESULT_TYPE_SUCCESS":     2,
	}
)

func (x ResponseResultType) Enum() *ResponseResultType {
	p := new(ResponseResultType)
	*p = x
	return p
}

func (x ResponseResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_ibc_core_channel_v1_tx_proto_enumTypes[0].Descriptor()
}

func (ResponseResultType) Type() protoreflect.EnumType {
	return &file_ibc_core_channel_v1_tx_proto_enumTypes[0]
}

func (x ResponseResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseResultType.Descriptor instead.
func (ResponseResultType) EnumDescriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{0}
}

// MsgChannelOpenInit defines an sdk.Msg to initialize a channel handshake. It
// is called by a relayer on Chain A.
type MsgChannelOpenInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId  string   `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	Channel *Channel `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Signer  string   `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *MsgChannelOpenInit) Reset() {
	*x = MsgChannelOpenInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgChannelOpenInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgChannelOpenInit) ProtoMessage() {}

func (x *MsgChannelOpenInit) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgChannelOpenInit.ProtoReflect.Descriptor instead.
func (*MsgChannelOpenInit) Descriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{0}
}

func (x *MsgChannelOpenInit) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *MsgChannelOpenInit) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *MsgChannelOpenInit) GetSigner() string {
	if x != nil {
		return x.Signer
	}
	return ""
}

// MsgChannelOpenInitResponse defines the Msg/ChannelOpenInit response type.
type MsgChannelOpenInitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *MsgChannelOpenInitResponse) Reset() {
	*x = MsgChannelOpenInitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgChannelOpenInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgChannelOpenInitResponse) ProtoMessage() {}

func (x *MsgChannelOpenInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgChannelOpenInitResponse.ProtoReflect.Descriptor instead.
func (*MsgChannelOpenInitResponse) Descriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{1}
}

func (x *MsgChannelOpenInitResponse) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

// MsgChannelOpenInit defines a msg sent by a Relayer to try to open a channel
// on Chain B. The version field within the Channel field has been deprecated. Its
// value will be ignored by core IBC.
type MsgChannelOpenTry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	// in the case of crossing hello's, when both chains call OpenInit, we need
	// the channel identifier of the previous channel in state INIT
	PreviousChannelId string `protobuf:"bytes,2,opt,name=previous_channel_id,json=previousChannelId,proto3" json:"previous_channel_id,omitempty"`
	// NOTE: the version field within the channel has been deprecated. Its value will be ignored by core IBC.
	Channel             *Channel      `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	CounterpartyVersion string        `protobuf:"bytes,4,opt,name=counterparty_version,json=counterpartyVersion,proto3" json:"counterparty_version,omitempty"`
	ProofInit           []byte        `protobuf:"bytes,5,opt,name=proof_init,json=proofInit,proto3" json:"proof_init,omitempty"`
	ProofHeight         *types.Height `protobuf:"bytes,6,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height,omitempty"`
	Signer              string        `protobuf:"bytes,7,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *MsgChannelOpenTry) Reset() {
	*x = MsgChannelOpenTry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgChannelOpenTry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgChannelOpenTry) ProtoMessage() {}

func (x *MsgChannelOpenTry) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgChannelOpenTry.ProtoReflect.Descriptor instead.
func (*MsgChannelOpenTry) Descriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{2}
}

func (x *MsgChannelOpenTry) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *MsgChannelOpenTry) GetPreviousChannelId() string {
	if x != nil {
		return x.PreviousChannelId
	}
	return ""
}

func (x *MsgChannelOpenTry) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *MsgChannelOpenTry) GetCounterpartyVersion() string {
	if x != nil {
		return x.CounterpartyVersion
	}
	return ""
}

func (x *MsgChannelOpenTry) GetProofInit() []byte {
	if x != nil {
		return x.ProofInit
	}
	return nil
}

func (x *MsgChannelOpenTry) GetProofHeight() *types.Height {
	if x != nil {
		return x.ProofHeight
	}
	return nil
}

func (x *MsgChannelOpenTry) GetSigner() string {
	if x != nil {
		return x.Signer
	}
	return ""
}

// MsgChannelOpenTryResponse defines the Msg/ChannelOpenTry response type.
type MsgChannelOpenTryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgChannelOpenTryResponse) Reset() {
	*x = MsgChannelOpenTryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgChannelOpenTryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgChannelOpenTryResponse) ProtoMessage() {}

func (x *MsgChannelOpenTryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgChannelOpenTryResponse.ProtoReflect.Descriptor instead.
func (*MsgChannelOpenTryResponse) Descriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{3}
}

// MsgChannelOpenAck defines a msg sent by a Relayer to Chain A to acknowledge
// the change of channel state to TRYOPEN on Chain B.
type MsgChannelOpenAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId                string        `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId             string        `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	CounterpartyChannelId string        `protobuf:"bytes,3,opt,name=counterparty_channel_id,json=counterpartyChannelId,proto3" json:"counterparty_channel_id,omitempty"`
	CounterpartyVersion   string        `protobuf:"bytes,4,opt,name=counterparty_version,json=counterpartyVersion,proto3" json:"counterparty_version,omitempty"`
	ProofTry              []byte        `protobuf:"bytes,5,opt,name=proof_try,json=proofTry,proto3" json:"proof_try,omitempty"`
	ProofHeight           *types.Height `protobuf:"bytes,6,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height,omitempty"`
	Signer                string        `protobuf:"bytes,7,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *MsgChannelOpenAck) Reset() {
	*x = MsgChannelOpenAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgChannelOpenAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgChannelOpenAck) ProtoMessage() {}

func (x *MsgChannelOpenAck) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgChannelOpenAck.ProtoReflect.Descriptor instead.
func (*MsgChannelOpenAck) Descriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{4}
}

func (x *MsgChannelOpenAck) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *MsgChannelOpenAck) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *MsgChannelOpenAck) GetCounterpartyChannelId() string {
	if x != nil {
		return x.CounterpartyChannelId
	}
	return ""
}

func (x *MsgChannelOpenAck) GetCounterpartyVersion() string {
	if x != nil {
		return x.CounterpartyVersion
	}
	return ""
}

func (x *MsgChannelOpenAck) GetProofTry() []byte {
	if x != nil {
		return x.ProofTry
	}
	return nil
}

func (x *MsgChannelOpenAck) GetProofHeight() *types.Height {
	if x != nil {
		return x.ProofHeight
	}
	return nil
}

func (x *MsgChannelOpenAck) GetSigner() string {
	if x != nil {
		return x.Signer
	}
	return ""
}

// MsgChannelOpenAckResponse defines the Msg/ChannelOpenAck response type.
type MsgChannelOpenAckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgChannelOpenAckResponse) Reset() {
	*x = MsgChannelOpenAckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgChannelOpenAckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgChannelOpenAckResponse) ProtoMessage() {}

func (x *MsgChannelOpenAckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgChannelOpenAckResponse.ProtoReflect.Descriptor instead.
func (*MsgChannelOpenAckResponse) Descriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{5}
}

// MsgChannelOpenConfirm defines a msg sent by a Relayer to Chain B to
// acknowledge the change of channel state to OPEN on Chain A.
type MsgChannelOpenConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId      string        `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId   string        `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	ProofAck    []byte        `protobuf:"bytes,3,opt,name=proof_ack,json=proofAck,proto3" json:"proof_ack,omitempty"`
	ProofHeight *types.Height `protobuf:"bytes,4,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height,omitempty"`
	Signer      string        `protobuf:"bytes,5,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *MsgChannelOpenConfirm) Reset() {
	*x = MsgChannelOpenConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgChannelOpenConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgChannelOpenConfirm) ProtoMessage() {}

func (x *MsgChannelOpenConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgChannelOpenConfirm.ProtoReflect.Descriptor instead.
func (*MsgChannelOpenConfirm) Descriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{6}
}

func (x *MsgChannelOpenConfirm) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *MsgChannelOpenConfirm) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *MsgChannelOpenConfirm) GetProofAck() []byte {
	if x != nil {
		return x.ProofAck
	}
	return nil
}

func (x *MsgChannelOpenConfirm) GetProofHeight() *types.Height {
	if x != nil {
		return x.ProofHeight
	}
	return nil
}

func (x *MsgChannelOpenConfirm) GetSigner() string {
	if x != nil {
		return x.Signer
	}
	return ""
}

// MsgChannelOpenConfirmResponse defines the Msg/ChannelOpenConfirm response
// type.
type MsgChannelOpenConfirmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgChannelOpenConfirmResponse) Reset() {
	*x = MsgChannelOpenConfirmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgChannelOpenConfirmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgChannelOpenConfirmResponse) ProtoMessage() {}

func (x *MsgChannelOpenConfirmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgChannelOpenConfirmResponse.ProtoReflect.Descriptor instead.
func (*MsgChannelOpenConfirmResponse) Descriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{7}
}

// MsgChannelCloseInit defines a msg sent by a Relayer to Chain A
// to close a channel with Chain B.
type MsgChannelCloseInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId    string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Signer    string `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *MsgChannelCloseInit) Reset() {
	*x = MsgChannelCloseInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgChannelCloseInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgChannelCloseInit) ProtoMessage() {}

func (x *MsgChannelCloseInit) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgChannelCloseInit.ProtoReflect.Descriptor instead.
func (*MsgChannelCloseInit) Descriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{8}
}

func (x *MsgChannelCloseInit) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *MsgChannelCloseInit) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *MsgChannelCloseInit) GetSigner() string {
	if x != nil {
		return x.Signer
	}
	return ""
}

// MsgChannelCloseInitResponse defines the Msg/ChannelCloseInit response type.
type MsgChannelCloseInitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgChannelCloseInitResponse) Reset() {
	*x = MsgChannelCloseInitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgChannelCloseInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgChannelCloseInitResponse) ProtoMessage() {}

func (x *MsgChannelCloseInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgChannelCloseInitResponse.ProtoReflect.Descriptor instead.
func (*MsgChannelCloseInitResponse) Descriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{9}
}

// MsgChannelCloseConfirm defines a msg sent by a Relayer to Chain B
// to acknowledge the change of channel state to CLOSED on Chain A.
type MsgChannelCloseConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId      string        `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId   string        `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	ProofInit   []byte        `protobuf:"bytes,3,opt,name=proof_init,json=proofInit,proto3" json:"proof_init,omitempty"`
	ProofHeight *types.Height `protobuf:"bytes,4,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height,omitempty"`
	Signer      string        `protobuf:"bytes,5,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *MsgChannelCloseConfirm) Reset() {
	*x = MsgChannelCloseConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgChannelCloseConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgChannelCloseConfirm) ProtoMessage() {}

func (x *MsgChannelCloseConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgChannelCloseConfirm.ProtoReflect.Descriptor instead.
func (*MsgChannelCloseConfirm) Descriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{10}
}

func (x *MsgChannelCloseConfirm) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *MsgChannelCloseConfirm) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *MsgChannelCloseConfirm) GetProofInit() []byte {
	if x != nil {
		return x.ProofInit
	}
	return nil
}

func (x *MsgChannelCloseConfirm) GetProofHeight() *types.Height {
	if x != nil {
		return x.ProofHeight
	}
	return nil
}

func (x *MsgChannelCloseConfirm) GetSigner() string {
	if x != nil {
		return x.Signer
	}
	return ""
}

// MsgChannelCloseConfirmResponse defines the Msg/ChannelCloseConfirm response
// type.
type MsgChannelCloseConfirmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgChannelCloseConfirmResponse) Reset() {
	*x = MsgChannelCloseConfirmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgChannelCloseConfirmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgChannelCloseConfirmResponse) ProtoMessage() {}

func (x *MsgChannelCloseConfirmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgChannelCloseConfirmResponse.ProtoReflect.Descriptor instead.
func (*MsgChannelCloseConfirmResponse) Descriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{11}
}

// MsgRecvPacket receives incoming IBC packet
type MsgRecvPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packet          *Packet       `protobuf:"bytes,1,opt,name=packet,proto3" json:"packet,omitempty"`
	ProofCommitment []byte        `protobuf:"bytes,2,opt,name=proof_commitment,json=proofCommitment,proto3" json:"proof_commitment,omitempty"`
	ProofHeight     *types.Height `protobuf:"bytes,3,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height,omitempty"`
	Signer          string        `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *MsgRecvPacket) Reset() {
	*x = MsgRecvPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgRecvPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgRecvPacket) ProtoMessage() {}

func (x *MsgRecvPacket) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgRecvPacket.ProtoReflect.Descriptor instead.
func (*MsgRecvPacket) Descriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{12}
}

func (x *MsgRecvPacket) GetPacket() *Packet {
	if x != nil {
		return x.Packet
	}
	return nil
}

func (x *MsgRecvPacket) GetProofCommitment() []byte {
	if x != nil {
		return x.ProofCommitment
	}
	return nil
}

func (x *MsgRecvPacket) GetProofHeight() *types.Height {
	if x != nil {
		return x.ProofHeight
	}
	return nil
}

func (x *MsgRecvPacket) GetSigner() string {
	if x != nil {
		return x.Signer
	}
	return ""
}

// MsgRecvPacketResponse defines the Msg/RecvPacket response type.
type MsgRecvPacketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ResponseResultType `protobuf:"varint,1,opt,name=result,proto3,enum=ibc.core.channel.v1.ResponseResultType" json:"result,omitempty"`
}

func (x *MsgRecvPacketResponse) Reset() {
	*x = MsgRecvPacketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgRecvPacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgRecvPacketResponse) ProtoMessage() {}

func (x *MsgRecvPacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgRecvPacketResponse.ProtoReflect.Descriptor instead.
func (*MsgRecvPacketResponse) Descriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{13}
}

func (x *MsgRecvPacketResponse) GetResult() ResponseResultType {
	if x != nil {
		return x.Result
	}
	return ResponseResultType_RESPONSE_RESULT_TYPE_UNSPECIFIED
}

// MsgTimeout receives timed-out packet
type MsgTimeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packet           *Packet       `protobuf:"bytes,1,opt,name=packet,proto3" json:"packet,omitempty"`
	ProofUnreceived  []byte        `protobuf:"bytes,2,opt,name=proof_unreceived,json=proofUnreceived,proto3" json:"proof_unreceived,omitempty"`
	ProofHeight      *types.Height `protobuf:"bytes,3,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height,omitempty"`
	NextSequenceRecv uint64        `protobuf:"varint,4,opt,name=next_sequence_recv,json=nextSequenceRecv,proto3" json:"next_sequence_recv,omitempty"`
	Signer           string        `protobuf:"bytes,5,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *MsgTimeout) Reset() {
	*x = MsgTimeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgTimeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgTimeout) ProtoMessage() {}

func (x *MsgTimeout) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgTimeout.ProtoReflect.Descriptor instead.
func (*MsgTimeout) Descriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{14}
}

func (x *MsgTimeout) GetPacket() *Packet {
	if x != nil {
		return x.Packet
	}
	return nil
}

func (x *MsgTimeout) GetProofUnreceived() []byte {
	if x != nil {
		return x.ProofUnreceived
	}
	return nil
}

func (x *MsgTimeout) GetProofHeight() *types.Height {
	if x != nil {
		return x.ProofHeight
	}
	return nil
}

func (x *MsgTimeout) GetNextSequenceRecv() uint64 {
	if x != nil {
		return x.NextSequenceRecv
	}
	return 0
}

func (x *MsgTimeout) GetSigner() string {
	if x != nil {
		return x.Signer
	}
	return ""
}

// MsgTimeoutResponse defines the Msg/Timeout response type.
type MsgTimeoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ResponseResultType `protobuf:"varint,1,opt,name=result,proto3,enum=ibc.core.channel.v1.ResponseResultType" json:"result,omitempty"`
}

func (x *MsgTimeoutResponse) Reset() {
	*x = MsgTimeoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgTimeoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgTimeoutResponse) ProtoMessage() {}

func (x *MsgTimeoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgTimeoutResponse.ProtoReflect.Descriptor instead.
func (*MsgTimeoutResponse) Descriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{15}
}

func (x *MsgTimeoutResponse) GetResult() ResponseResultType {
	if x != nil {
		return x.Result
	}
	return ResponseResultType_RESPONSE_RESULT_TYPE_UNSPECIFIED
}

// MsgTimeoutOnClose timed-out packet upon counterparty channel closure.
type MsgTimeoutOnClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packet           *Packet       `protobuf:"bytes,1,opt,name=packet,proto3" json:"packet,omitempty"`
	ProofUnreceived  []byte        `protobuf:"bytes,2,opt,name=proof_unreceived,json=proofUnreceived,proto3" json:"proof_unreceived,omitempty"`
	ProofClose       []byte        `protobuf:"bytes,3,opt,name=proof_close,json=proofClose,proto3" json:"proof_close,omitempty"`
	ProofHeight      *types.Height `protobuf:"bytes,4,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height,omitempty"`
	NextSequenceRecv uint64        `protobuf:"varint,5,opt,name=next_sequence_recv,json=nextSequenceRecv,proto3" json:"next_sequence_recv,omitempty"`
	Signer           string        `protobuf:"bytes,6,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *MsgTimeoutOnClose) Reset() {
	*x = MsgTimeoutOnClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgTimeoutOnClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgTimeoutOnClose) ProtoMessage() {}

func (x *MsgTimeoutOnClose) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgTimeoutOnClose.ProtoReflect.Descriptor instead.
func (*MsgTimeoutOnClose) Descriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{16}
}

func (x *MsgTimeoutOnClose) GetPacket() *Packet {
	if x != nil {
		return x.Packet
	}
	return nil
}

func (x *MsgTimeoutOnClose) GetProofUnreceived() []byte {
	if x != nil {
		return x.ProofUnreceived
	}
	return nil
}

func (x *MsgTimeoutOnClose) GetProofClose() []byte {
	if x != nil {
		return x.ProofClose
	}
	return nil
}

func (x *MsgTimeoutOnClose) GetProofHeight() *types.Height {
	if x != nil {
		return x.ProofHeight
	}
	return nil
}

func (x *MsgTimeoutOnClose) GetNextSequenceRecv() uint64 {
	if x != nil {
		return x.NextSequenceRecv
	}
	return 0
}

func (x *MsgTimeoutOnClose) GetSigner() string {
	if x != nil {
		return x.Signer
	}
	return ""
}

// MsgTimeoutOnCloseResponse defines the Msg/TimeoutOnClose response type.
type MsgTimeoutOnCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ResponseResultType `protobuf:"varint,1,opt,name=result,proto3,enum=ibc.core.channel.v1.ResponseResultType" json:"result,omitempty"`
}

func (x *MsgTimeoutOnCloseResponse) Reset() {
	*x = MsgTimeoutOnCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgTimeoutOnCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgTimeoutOnCloseResponse) ProtoMessage() {}

func (x *MsgTimeoutOnCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgTimeoutOnCloseResponse.ProtoReflect.Descriptor instead.
func (*MsgTimeoutOnCloseResponse) Descriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{17}
}

func (x *MsgTimeoutOnCloseResponse) GetResult() ResponseResultType {
	if x != nil {
		return x.Result
	}
	return ResponseResultType_RESPONSE_RESULT_TYPE_UNSPECIFIED
}

// MsgAcknowledgement receives incoming IBC acknowledgement
type MsgAcknowledgement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packet          *Packet       `protobuf:"bytes,1,opt,name=packet,proto3" json:"packet,omitempty"`
	Acknowledgement []byte        `protobuf:"bytes,2,opt,name=acknowledgement,proto3" json:"acknowledgement,omitempty"`
	ProofAcked      []byte        `protobuf:"bytes,3,opt,name=proof_acked,json=proofAcked,proto3" json:"proof_acked,omitempty"`
	ProofHeight     *types.Height `protobuf:"bytes,4,opt,name=proof_height,json=proofHeight,proto3" json:"proof_height,omitempty"`
	Signer          string        `protobuf:"bytes,5,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *MsgAcknowledgement) Reset() {
	*x = MsgAcknowledgement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgAcknowledgement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgAcknowledgement) ProtoMessage() {}

func (x *MsgAcknowledgement) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgAcknowledgement.ProtoReflect.Descriptor instead.
func (*MsgAcknowledgement) Descriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{18}
}

func (x *MsgAcknowledgement) GetPacket() *Packet {
	if x != nil {
		return x.Packet
	}
	return nil
}

func (x *MsgAcknowledgement) GetAcknowledgement() []byte {
	if x != nil {
		return x.Acknowledgement
	}
	return nil
}

func (x *MsgAcknowledgement) GetProofAcked() []byte {
	if x != nil {
		return x.ProofAcked
	}
	return nil
}

func (x *MsgAcknowledgement) GetProofHeight() *types.Height {
	if x != nil {
		return x.ProofHeight
	}
	return nil
}

func (x *MsgAcknowledgement) GetSigner() string {
	if x != nil {
		return x.Signer
	}
	return ""
}

// MsgAcknowledgementResponse defines the Msg/Acknowledgement response type.
type MsgAcknowledgementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ResponseResultType `protobuf:"varint,1,opt,name=result,proto3,enum=ibc.core.channel.v1.ResponseResultType" json:"result,omitempty"`
}

func (x *MsgAcknowledgementResponse) Reset() {
	*x = MsgAcknowledgementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgAcknowledgementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgAcknowledgementResponse) ProtoMessage() {}

func (x *MsgAcknowledgementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_core_channel_v1_tx_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgAcknowledgementResponse.ProtoReflect.Descriptor instead.
func (*MsgAcknowledgementResponse) Descriptor() ([]byte, []int) {
	return file_ibc_core_channel_v1_tx_proto_rawDescGZIP(), []int{19}
}

func (x *MsgAcknowledgementResponse) GetResult() ResponseResultType {
	if x != nil {
		return x.Result
	}
	return ResponseResultType_RESPONSE_RESULT_TYPE_UNSPECIFIED
}

var File_ibc_core_channel_v1_tx_proto protoreflect.FileDescriptor

var file_ibc_core_channel_v1_tx_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x69, 0x62, 0x63, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13,
	0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x69, 0x62, 0x63, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x69, 0x62, 0x63, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x01,
	0x0a, 0x12, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x6e, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xf2, 0xde, 0x1f, 0x0e, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f,
	0x00, 0x22, 0x52, 0x0a, 0x1a, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x15, 0xf2, 0xde, 0x1f, 0x11, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xd6, 0x03, 0x0a, 0x11, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x07, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xf2, 0xde,
	0x1f, 0x0e, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x22,
	0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xf2, 0xde, 0x1f, 0x1a, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x62, 0x63, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x52, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xf2, 0xde, 0x1f, 0x1b, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x15,
	0xf2, 0xde, 0x1f, 0x11, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f,
	0x69, 0x6e, 0x69, 0x74, 0x22, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x6e, 0x69, 0x74,
	0x12, 0x5a, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x42, 0x1b, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22, 0x1b,
	0x0a, 0x19, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e,
	0x54, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd7, 0x03, 0x0a, 0x11,
	0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63,
	0x6b, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x12, 0xf2, 0xde, 0x1f, 0x0e, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0xf2, 0xde, 0x1f, 0x11, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x17, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xf2, 0xde, 0x1f, 0x1e, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x15, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x52, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0xf2, 0xde, 0x1f, 0x1b, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x52,
	0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x74, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x14, 0xf2, 0xde, 0x1f, 0x10, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x74, 0x72, 0x79, 0x22, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x54, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x1b, 0xc8, 0xde, 0x1f, 0x00, 0xf2,
	0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x3a, 0x08, 0x88, 0xa0, 0x1f,
	0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22, 0x1b, 0x0a, 0x19, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x15, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x2b, 0x0a, 0x07,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xf2,
	0xde, 0x1f, 0x0e, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x22, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xf2,
	0xde, 0x1f, 0x11, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x22, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x31, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x14, 0xf2, 0xde, 0x1f, 0x10, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x5f, 0x61, 0x63, 0x6b, 0x22, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x41,
	0x63, 0x6b, 0x12, 0x5a, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x42, 0x1b, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00,
	0x22, 0x1f, 0x0a, 0x1d, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70,
	0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xf2, 0xde, 0x1f, 0x0e,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x06,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xf2, 0xde, 0x1f, 0x11,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x22, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22, 0x1d,
	0x0a, 0x1b, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf, 0x02,
	0x0a, 0x16, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xf2, 0xde, 0x1f, 0x0e, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x06, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xf2, 0xde, 0x1f, 0x11, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x22,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x15, 0xf2, 0xde, 0x1f, 0x11, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x22, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x6e, 0x69,
	0x74, 0x12, 0x5a, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x42, 0x1b, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22,
	0x20, 0x0a, 0x1e, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x90, 0x02, 0x0a, 0x0d, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x76, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x46,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x1b, 0xf2, 0xde, 0x1f, 0x17, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69,
	0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x1b, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde,
	0x1f, 0x13, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00,
	0xe8, 0xa0, 0x1f, 0x00, 0x22, 0x5e, 0x0a, 0x15, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x76, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x04,
	0x88, 0xa0, 0x1f, 0x00, 0x22, 0xda, 0x02, 0x0a, 0x0a, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x46,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x1b, 0xf2, 0xde, 0x1f, 0x17, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x22, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x55, 0x6e, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69,
	0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x1b, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde,
	0x1f, 0x13, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1d,
	0xf2, 0xde, 0x1f, 0x19, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x22, 0x52, 0x10, 0x6e,
	0x65, 0x78, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x76, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f,
	0x00, 0x22, 0x5b, 0x0a, 0x12, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0x9a,
	0x03, 0x0a, 0x11, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4f, 0x6e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x46, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x1b, 0xf2, 0xde, 0x1f, 0x17, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x55, 0x6e, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x16, 0xf2, 0xde,
	0x1f, 0x12, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x22, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x12, 0x5a, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x42, 0x1b, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4b, 0x0a, 0x12,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x63, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1d, 0xf2, 0xde, 0x1f, 0x19, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x22, 0x52, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22, 0x62, 0x0a, 0x19, 0x4d,
	0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22,
	0xb0, 0x02, 0x0a, 0x12, 0x4d, 0x73, 0x67, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x61, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x16, 0xf2, 0xde, 0x1f, 0x12, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x5f, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x41,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x62, 0x63,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x1b, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x13,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0,
	0x1f, 0x00, 0x22, 0x63, 0x0a, 0x1a, 0x4d, 0x73, 0x67, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x2a, 0xa9, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35,
	0x0a, 0x20, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x1a, 0x0f, 0x8a, 0x9d, 0x20, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x12, 0x27, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x4f, 0x50, 0x10, 0x01, 0x1a, 0x08, 0x8a, 0x9d, 0x20, 0x04, 0x4e, 0x4f, 0x4f, 0x50, 0x12, 0x2d,
	0x0a, 0x1c, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02,
	0x1a, 0x0b, 0x8a, 0x9d, 0x20, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x1a, 0x04, 0x88,
	0xa3, 0x1e, 0x00, 0x32, 0xaf, 0x08, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x6b, 0x0a, 0x0f, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x27,
	0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x1a, 0x2f, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73,
	0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x69, 0x62, 0x63,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x54,
	0x72, 0x79, 0x1a, 0x2e, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x68, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65,
	0x6e, 0x41, 0x63, 0x6b, 0x12, 0x26, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x6b, 0x1a, 0x2e, 0x2e, 0x69,
	0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65,
	0x6e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x12,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x12, 0x2a, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x1a, 0x32,
	0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f,
	0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6e, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x28, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x69, 0x74,
	0x1a, 0x30, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x77, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x2b, 0x2e, 0x69, 0x62, 0x63, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x1a, 0x33, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0a, 0x52,
	0x65, 0x63, 0x76, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x69, 0x62, 0x63, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x76, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x2a, 0x2e,
	0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x76, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x07, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x27, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68,
	0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x12, 0x26, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x4f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x1a, 0x2e, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0f, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x69, 0x62,
	0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x73, 0x67, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x2f, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x41, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x69, 0x62, 0x63, 0x2d, 0x67,
	0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x30, 0x34, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ibc_core_channel_v1_tx_proto_rawDescOnce sync.Once
	file_ibc_core_channel_v1_tx_proto_rawDescData = file_ibc_core_channel_v1_tx_proto_rawDesc
)

func file_ibc_core_channel_v1_tx_proto_rawDescGZIP() []byte {
	file_ibc_core_channel_v1_tx_proto_rawDescOnce.Do(func() {
		file_ibc_core_channel_v1_tx_proto_rawDescData = protoimpl.X.CompressGZIP(file_ibc_core_channel_v1_tx_proto_rawDescData)
	})
	return file_ibc_core_channel_v1_tx_proto_rawDescData
}

var file_ibc_core_channel_v1_tx_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ibc_core_channel_v1_tx_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_ibc_core_channel_v1_tx_proto_goTypes = []interface{}{
	(ResponseResultType)(0),                // 0: ibc.core.channel.v1.ResponseResultType
	(*MsgChannelOpenInit)(nil),             // 1: ibc.core.channel.v1.MsgChannelOpenInit
	(*MsgChannelOpenInitResponse)(nil),     // 2: ibc.core.channel.v1.MsgChannelOpenInitResponse
	(*MsgChannelOpenTry)(nil),              // 3: ibc.core.channel.v1.MsgChannelOpenTry
	(*MsgChannelOpenTryResponse)(nil),      // 4: ibc.core.channel.v1.MsgChannelOpenTryResponse
	(*MsgChannelOpenAck)(nil),              // 5: ibc.core.channel.v1.MsgChannelOpenAck
	(*MsgChannelOpenAckResponse)(nil),      // 6: ibc.core.channel.v1.MsgChannelOpenAckResponse
	(*MsgChannelOpenConfirm)(nil),          // 7: ibc.core.channel.v1.MsgChannelOpenConfirm
	(*MsgChannelOpenConfirmResponse)(nil),  // 8: ibc.core.channel.v1.MsgChannelOpenConfirmResponse
	(*MsgChannelCloseInit)(nil),            // 9: ibc.core.channel.v1.MsgChannelCloseInit
	(*MsgChannelCloseInitResponse)(nil),    // 10: ibc.core.channel.v1.MsgChannelCloseInitResponse
	(*MsgChannelCloseConfirm)(nil),         // 11: ibc.core.channel.v1.MsgChannelCloseConfirm
	(*MsgChannelCloseConfirmResponse)(nil), // 12: ibc.core.channel.v1.MsgChannelCloseConfirmResponse
	(*MsgRecvPacket)(nil),                  // 13: ibc.core.channel.v1.MsgRecvPacket
	(*MsgRecvPacketResponse)(nil),          // 14: ibc.core.channel.v1.MsgRecvPacketResponse
	(*MsgTimeout)(nil),                     // 15: ibc.core.channel.v1.MsgTimeout
	(*MsgTimeoutResponse)(nil),             // 16: ibc.core.channel.v1.MsgTimeoutResponse
	(*MsgTimeoutOnClose)(nil),              // 17: ibc.core.channel.v1.MsgTimeoutOnClose
	(*MsgTimeoutOnCloseResponse)(nil),      // 18: ibc.core.channel.v1.MsgTimeoutOnCloseResponse
	(*MsgAcknowledgement)(nil),             // 19: ibc.core.channel.v1.MsgAcknowledgement
	(*MsgAcknowledgementResponse)(nil),     // 20: ibc.core.channel.v1.MsgAcknowledgementResponse
	(*Channel)(nil),                        // 21: ibc.core.channel.v1.Channel
	(*types.Height)(nil),                   // 22: ibc.core.client.v1.Height
	(*Packet)(nil),                         // 23: ibc.core.channel.v1.Packet
}
var file_ibc_core_channel_v1_tx_proto_depIdxs = []int32{
	21, // 0: ibc.core.channel.v1.MsgChannelOpenInit.channel:type_name -> ibc.core.channel.v1.Channel
	21, // 1: ibc.core.channel.v1.MsgChannelOpenTry.channel:type_name -> ibc.core.channel.v1.Channel
	22, // 2: ibc.core.channel.v1.MsgChannelOpenTry.proof_height:type_name -> ibc.core.client.v1.Height
	22, // 3: ibc.core.channel.v1.MsgChannelOpenAck.proof_height:type_name -> ibc.core.client.v1.Height
	22, // 4: ibc.core.channel.v1.MsgChannelOpenConfirm.proof_height:type_name -> ibc.core.client.v1.Height
	22, // 5: ibc.core.channel.v1.MsgChannelCloseConfirm.proof_height:type_name -> ibc.core.client.v1.Height
	23, // 6: ibc.core.channel.v1.MsgRecvPacket.packet:type_name -> ibc.core.channel.v1.Packet
	22, // 7: ibc.core.channel.v1.MsgRecvPacket.proof_height:type_name -> ibc.core.client.v1.Height
	0,  // 8: ibc.core.channel.v1.MsgRecvPacketResponse.result:type_name -> ibc.core.channel.v1.ResponseResultType
	23, // 9: ibc.core.channel.v1.MsgTimeout.packet:type_name -> ibc.core.channel.v1.Packet
	22, // 10: ibc.core.channel.v1.MsgTimeout.proof_height:type_name -> ibc.core.client.v1.Height
	0,  // 11: ibc.core.channel.v1.MsgTimeoutResponse.result:type_name -> ibc.core.channel.v1.ResponseResultType
	23, // 12: ibc.core.channel.v1.MsgTimeoutOnClose.packet:type_name -> ibc.core.channel.v1.Packet
	22, // 13: ibc.core.channel.v1.MsgTimeoutOnClose.proof_height:type_name -> ibc.core.client.v1.Height
	0,  // 14: ibc.core.channel.v1.MsgTimeoutOnCloseResponse.result:type_name -> ibc.core.channel.v1.ResponseResultType
	23, // 15: ibc.core.channel.v1.MsgAcknowledgement.packet:type_name -> ibc.core.channel.v1.Packet
	22, // 16: ibc.core.channel.v1.MsgAcknowledgement.proof_height:type_name -> ibc.core.client.v1.Height
	0,  // 17: ibc.core.channel.v1.MsgAcknowledgementResponse.result:type_name -> ibc.core.channel.v1.ResponseResultType
	1,  // 18: ibc.core.channel.v1.Msg.ChannelOpenInit:input_type -> ibc.core.channel.v1.MsgChannelOpenInit
	3,  // 19: ibc.core.channel.v1.Msg.ChannelOpenTry:input_type -> ibc.core.channel.v1.MsgChannelOpenTry
	5,  // 20: ibc.core.channel.v1.Msg.ChannelOpenAck:input_type -> ibc.core.channel.v1.MsgChannelOpenAck
	7,  // 21: ibc.core.channel.v1.Msg.ChannelOpenConfirm:input_type -> ibc.core.channel.v1.MsgChannelOpenConfirm
	9,  // 22: ibc.core.channel.v1.Msg.ChannelCloseInit:input_type -> ibc.core.channel.v1.MsgChannelCloseInit
	11, // 23: ibc.core.channel.v1.Msg.ChannelCloseConfirm:input_type -> ibc.core.channel.v1.MsgChannelCloseConfirm
	13, // 24: ibc.core.channel.v1.Msg.RecvPacket:input_type -> ibc.core.channel.v1.MsgRecvPacket
	15, // 25: ibc.core.channel.v1.Msg.Timeout:input_type -> ibc.core.channel.v1.MsgTimeout
	17, // 26: ibc.core.channel.v1.Msg.TimeoutOnClose:input_type -> ibc.core.channel.v1.MsgTimeoutOnClose
	19, // 27: ibc.core.channel.v1.Msg.Acknowledgement:input_type -> ibc.core.channel.v1.MsgAcknowledgement
	2,  // 28: ibc.core.channel.v1.Msg.ChannelOpenInit:output_type -> ibc.core.channel.v1.MsgChannelOpenInitResponse
	4,  // 29: ibc.core.channel.v1.Msg.ChannelOpenTry:output_type -> ibc.core.channel.v1.MsgChannelOpenTryResponse
	6,  // 30: ibc.core.channel.v1.Msg.ChannelOpenAck:output_type -> ibc.core.channel.v1.MsgChannelOpenAckResponse
	8,  // 31: ibc.core.channel.v1.Msg.ChannelOpenConfirm:output_type -> ibc.core.channel.v1.MsgChannelOpenConfirmResponse
	10, // 32: ibc.core.channel.v1.Msg.ChannelCloseInit:output_type -> ibc.core.channel.v1.MsgChannelCloseInitResponse
	12, // 33: ibc.core.channel.v1.Msg.ChannelCloseConfirm:output_type -> ibc.core.channel.v1.MsgChannelCloseConfirmResponse
	14, // 34: ibc.core.channel.v1.Msg.RecvPacket:output_type -> ibc.core.channel.v1.MsgRecvPacketResponse
	16, // 35: ibc.core.channel.v1.Msg.Timeout:output_type -> ibc.core.channel.v1.MsgTimeoutResponse
	18, // 36: ibc.core.channel.v1.Msg.TimeoutOnClose:output_type -> ibc.core.channel.v1.MsgTimeoutOnCloseResponse
	20, // 37: ibc.core.channel.v1.Msg.Acknowledgement:output_type -> ibc.core.channel.v1.MsgAcknowledgementResponse
	28, // [28:38] is the sub-list for method output_type
	18, // [18:28] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_ibc_core_channel_v1_tx_proto_init() }
func file_ibc_core_channel_v1_tx_proto_init() {
	if File_ibc_core_channel_v1_tx_proto != nil {
		return
	}
	file_ibc_core_channel_v1_channel_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ibc_core_channel_v1_tx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgChannelOpenInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_core_channel_v1_tx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgChannelOpenInitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_core_channel_v1_tx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgChannelOpenTry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_core_channel_v1_tx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgChannelOpenTryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_core_channel_v1_tx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgChannelOpenAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_core_channel_v1_tx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgChannelOpenAckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_core_channel_v1_tx_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgChannelOpenConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_core_channel_v1_tx_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgChannelOpenConfirmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_core_channel_v1_tx_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgChannelCloseInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_core_channel_v1_tx_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgChannelCloseInitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_core_channel_v1_tx_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgChannelCloseConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_core_channel_v1_tx_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgChannelCloseConfirmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_core_channel_v1_tx_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgRecvPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_core_channel_v1_tx_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgRecvPacketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_core_channel_v1_tx_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgTimeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_core_channel_v1_tx_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgTimeoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_core_channel_v1_tx_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgTimeoutOnClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_core_channel_v1_tx_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgTimeoutOnCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_core_channel_v1_tx_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgAcknowledgement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_core_channel_v1_tx_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgAcknowledgementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ibc_core_channel_v1_tx_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ibc_core_channel_v1_tx_proto_goTypes,
		DependencyIndexes: file_ibc_core_channel_v1_tx_proto_depIdxs,
		EnumInfos:         file_ibc_core_channel_v1_tx_proto_enumTypes,
		MessageInfos:      file_ibc_core_channel_v1_tx_proto_msgTypes,
	}.Build()
	File_ibc_core_channel_v1_tx_proto = out.File
	file_ibc_core_channel_v1_tx_proto_rawDesc = nil
	file_ibc_core_channel_v1_tx_proto_goTypes = nil
	file_ibc_core_channel_v1_tx_proto_depIdxs = nil
}
