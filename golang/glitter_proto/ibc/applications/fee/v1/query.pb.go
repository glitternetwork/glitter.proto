// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0-devel
// 	protoc        v3.14.0
// source: ibc/applications/fee/v1/query.proto

package types

import (
	types1 "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	types "github.com/cosmos/ibc-go/v3/modules/core/04-channel/types"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QueryIncentivizedPacketsRequest defines the request type for the IncentivizedPackets rpc
type QueryIncentivizedPacketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// block height at which to query
	QueryHeight uint64 `protobuf:"varint,2,opt,name=query_height,json=queryHeight,proto3" json:"query_height,omitempty"`
}

func (x *QueryIncentivizedPacketsRequest) Reset() {
	*x = QueryIncentivizedPacketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIncentivizedPacketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIncentivizedPacketsRequest) ProtoMessage() {}

func (x *QueryIncentivizedPacketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIncentivizedPacketsRequest.ProtoReflect.Descriptor instead.
func (*QueryIncentivizedPacketsRequest) Descriptor() ([]byte, []int) {
	return file_ibc_applications_fee_v1_query_proto_rawDescGZIP(), []int{0}
}

func (x *QueryIncentivizedPacketsRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryIncentivizedPacketsRequest) GetQueryHeight() uint64 {
	if x != nil {
		return x.QueryHeight
	}
	return 0
}

// QueryIncentivizedPacketsResponse defines the response type for the IncentivizedPackets rpc
type QueryIncentivizedPacketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of identified fees for incentivized packets
	IncentivizedPackets []*IdentifiedPacketFees `protobuf:"bytes,1,rep,name=incentivized_packets,json=incentivizedPackets,proto3" json:"incentivized_packets,omitempty"`
}

func (x *QueryIncentivizedPacketsResponse) Reset() {
	*x = QueryIncentivizedPacketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIncentivizedPacketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIncentivizedPacketsResponse) ProtoMessage() {}

func (x *QueryIncentivizedPacketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIncentivizedPacketsResponse.ProtoReflect.Descriptor instead.
func (*QueryIncentivizedPacketsResponse) Descriptor() ([]byte, []int) {
	return file_ibc_applications_fee_v1_query_proto_rawDescGZIP(), []int{1}
}

func (x *QueryIncentivizedPacketsResponse) GetIncentivizedPackets() []*IdentifiedPacketFees {
	if x != nil {
		return x.IncentivizedPackets
	}
	return nil
}

// QueryIncentivizedPacketRequest defines the request type for the IncentivizedPacket rpc
type QueryIncentivizedPacketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique packet identifier comprised of channel ID, port ID and sequence
	PacketId *types.PacketId `protobuf:"bytes,1,opt,name=packet_id,json=packetId,proto3" json:"packet_id,omitempty"`
	// block height at which to query
	QueryHeight uint64 `protobuf:"varint,2,opt,name=query_height,json=queryHeight,proto3" json:"query_height,omitempty"`
}

func (x *QueryIncentivizedPacketRequest) Reset() {
	*x = QueryIncentivizedPacketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIncentivizedPacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIncentivizedPacketRequest) ProtoMessage() {}

func (x *QueryIncentivizedPacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIncentivizedPacketRequest.ProtoReflect.Descriptor instead.
func (*QueryIncentivizedPacketRequest) Descriptor() ([]byte, []int) {
	return file_ibc_applications_fee_v1_query_proto_rawDescGZIP(), []int{2}
}

func (x *QueryIncentivizedPacketRequest) GetPacketId() *types.PacketId {
	if x != nil {
		return x.PacketId
	}
	return nil
}

func (x *QueryIncentivizedPacketRequest) GetQueryHeight() uint64 {
	if x != nil {
		return x.QueryHeight
	}
	return 0
}

// QueryIncentivizedPacketsResponse defines the response type for the IncentivizedPacket rpc
type QueryIncentivizedPacketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the identified fees for the incentivized packet
	IncentivizedPacket *IdentifiedPacketFees `protobuf:"bytes,1,opt,name=incentivized_packet,json=incentivizedPacket,proto3" json:"incentivized_packet,omitempty"`
}

func (x *QueryIncentivizedPacketResponse) Reset() {
	*x = QueryIncentivizedPacketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIncentivizedPacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIncentivizedPacketResponse) ProtoMessage() {}

func (x *QueryIncentivizedPacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIncentivizedPacketResponse.ProtoReflect.Descriptor instead.
func (*QueryIncentivizedPacketResponse) Descriptor() ([]byte, []int) {
	return file_ibc_applications_fee_v1_query_proto_rawDescGZIP(), []int{3}
}

func (x *QueryIncentivizedPacketResponse) GetIncentivizedPacket() *IdentifiedPacketFees {
	if x != nil {
		return x.IncentivizedPacket
	}
	return nil
}

// QueryIncentivizedPacketsForChannelRequest defines the request type for querying for all incentivized packets
// for a specific channel
type QueryIncentivizedPacketsForChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	PortId     string             `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId  string             `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Height to query at
	QueryHeight uint64 `protobuf:"varint,4,opt,name=query_height,json=queryHeight,proto3" json:"query_height,omitempty"`
}

func (x *QueryIncentivizedPacketsForChannelRequest) Reset() {
	*x = QueryIncentivizedPacketsForChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIncentivizedPacketsForChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIncentivizedPacketsForChannelRequest) ProtoMessage() {}

func (x *QueryIncentivizedPacketsForChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIncentivizedPacketsForChannelRequest.ProtoReflect.Descriptor instead.
func (*QueryIncentivizedPacketsForChannelRequest) Descriptor() ([]byte, []int) {
	return file_ibc_applications_fee_v1_query_proto_rawDescGZIP(), []int{4}
}

func (x *QueryIncentivizedPacketsForChannelRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryIncentivizedPacketsForChannelRequest) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *QueryIncentivizedPacketsForChannelRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *QueryIncentivizedPacketsForChannelRequest) GetQueryHeight() uint64 {
	if x != nil {
		return x.QueryHeight
	}
	return 0
}

// QueryIncentivizedPacketsResponse defines the response type for the incentivized packets RPC
type QueryIncentivizedPacketsForChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of all incentivized_packets
	IncentivizedPackets []*IdentifiedPacketFees `protobuf:"bytes,1,rep,name=incentivized_packets,json=incentivizedPackets,proto3" json:"incentivized_packets,omitempty"`
}

func (x *QueryIncentivizedPacketsForChannelResponse) Reset() {
	*x = QueryIncentivizedPacketsForChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIncentivizedPacketsForChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIncentivizedPacketsForChannelResponse) ProtoMessage() {}

func (x *QueryIncentivizedPacketsForChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIncentivizedPacketsForChannelResponse.ProtoReflect.Descriptor instead.
func (*QueryIncentivizedPacketsForChannelResponse) Descriptor() ([]byte, []int) {
	return file_ibc_applications_fee_v1_query_proto_rawDescGZIP(), []int{5}
}

func (x *QueryIncentivizedPacketsForChannelResponse) GetIncentivizedPackets() []*IdentifiedPacketFees {
	if x != nil {
		return x.IncentivizedPackets
	}
	return nil
}

// QueryTotalRecvFeesRequest defines the request type for the TotalRecvFees rpc
type QueryTotalRecvFeesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the packet identifier for the associated fees
	PacketId *types.PacketId `protobuf:"bytes,1,opt,name=packet_id,json=packetId,proto3" json:"packet_id,omitempty"`
}

func (x *QueryTotalRecvFeesRequest) Reset() {
	*x = QueryTotalRecvFeesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTotalRecvFeesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTotalRecvFeesRequest) ProtoMessage() {}

func (x *QueryTotalRecvFeesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTotalRecvFeesRequest.ProtoReflect.Descriptor instead.
func (*QueryTotalRecvFeesRequest) Descriptor() ([]byte, []int) {
	return file_ibc_applications_fee_v1_query_proto_rawDescGZIP(), []int{6}
}

func (x *QueryTotalRecvFeesRequest) GetPacketId() *types.PacketId {
	if x != nil {
		return x.PacketId
	}
	return nil
}

// QueryTotalRecvFeesResponse defines the response type for the TotalRecvFees rpc
type QueryTotalRecvFeesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the total packet receive fees
	RecvFees []*types1.Coin `protobuf:"bytes,1,rep,name=recv_fees,json=recvFees,proto3" json:"recv_fees,omitempty"`
}

func (x *QueryTotalRecvFeesResponse) Reset() {
	*x = QueryTotalRecvFeesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTotalRecvFeesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTotalRecvFeesResponse) ProtoMessage() {}

func (x *QueryTotalRecvFeesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTotalRecvFeesResponse.ProtoReflect.Descriptor instead.
func (*QueryTotalRecvFeesResponse) Descriptor() ([]byte, []int) {
	return file_ibc_applications_fee_v1_query_proto_rawDescGZIP(), []int{7}
}

func (x *QueryTotalRecvFeesResponse) GetRecvFees() []*types1.Coin {
	if x != nil {
		return x.RecvFees
	}
	return nil
}

// QueryTotalAckFeesRequest defines the request type for the TotalAckFees rpc
type QueryTotalAckFeesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the packet identifier for the associated fees
	PacketId *types.PacketId `protobuf:"bytes,1,opt,name=packet_id,json=packetId,proto3" json:"packet_id,omitempty"`
}

func (x *QueryTotalAckFeesRequest) Reset() {
	*x = QueryTotalAckFeesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTotalAckFeesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTotalAckFeesRequest) ProtoMessage() {}

func (x *QueryTotalAckFeesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTotalAckFeesRequest.ProtoReflect.Descriptor instead.
func (*QueryTotalAckFeesRequest) Descriptor() ([]byte, []int) {
	return file_ibc_applications_fee_v1_query_proto_rawDescGZIP(), []int{8}
}

func (x *QueryTotalAckFeesRequest) GetPacketId() *types.PacketId {
	if x != nil {
		return x.PacketId
	}
	return nil
}

// QueryTotalAckFeesResponse defines the response type for the TotalAckFees rpc
type QueryTotalAckFeesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the total packet acknowledgement fees
	AckFees []*types1.Coin `protobuf:"bytes,1,rep,name=ack_fees,json=ackFees,proto3" json:"ack_fees,omitempty"`
}

func (x *QueryTotalAckFeesResponse) Reset() {
	*x = QueryTotalAckFeesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTotalAckFeesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTotalAckFeesResponse) ProtoMessage() {}

func (x *QueryTotalAckFeesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTotalAckFeesResponse.ProtoReflect.Descriptor instead.
func (*QueryTotalAckFeesResponse) Descriptor() ([]byte, []int) {
	return file_ibc_applications_fee_v1_query_proto_rawDescGZIP(), []int{9}
}

func (x *QueryTotalAckFeesResponse) GetAckFees() []*types1.Coin {
	if x != nil {
		return x.AckFees
	}
	return nil
}

// QueryTotalTimeoutFeesRequest defines the request type for the TotalTimeoutFees rpc
type QueryTotalTimeoutFeesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the packet identifier for the associated fees
	PacketId *types.PacketId `protobuf:"bytes,1,opt,name=packet_id,json=packetId,proto3" json:"packet_id,omitempty"`
}

func (x *QueryTotalTimeoutFeesRequest) Reset() {
	*x = QueryTotalTimeoutFeesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTotalTimeoutFeesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTotalTimeoutFeesRequest) ProtoMessage() {}

func (x *QueryTotalTimeoutFeesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTotalTimeoutFeesRequest.ProtoReflect.Descriptor instead.
func (*QueryTotalTimeoutFeesRequest) Descriptor() ([]byte, []int) {
	return file_ibc_applications_fee_v1_query_proto_rawDescGZIP(), []int{10}
}

func (x *QueryTotalTimeoutFeesRequest) GetPacketId() *types.PacketId {
	if x != nil {
		return x.PacketId
	}
	return nil
}

// QueryTotalTimeoutFeesResponse defines the response type for the TotalTimeoutFees rpc
type QueryTotalTimeoutFeesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the total packet timeout fees
	TimeoutFees []*types1.Coin `protobuf:"bytes,1,rep,name=timeout_fees,json=timeoutFees,proto3" json:"timeout_fees,omitempty"`
}

func (x *QueryTotalTimeoutFeesResponse) Reset() {
	*x = QueryTotalTimeoutFeesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTotalTimeoutFeesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTotalTimeoutFeesResponse) ProtoMessage() {}

func (x *QueryTotalTimeoutFeesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTotalTimeoutFeesResponse.ProtoReflect.Descriptor instead.
func (*QueryTotalTimeoutFeesResponse) Descriptor() ([]byte, []int) {
	return file_ibc_applications_fee_v1_query_proto_rawDescGZIP(), []int{11}
}

func (x *QueryTotalTimeoutFeesResponse) GetTimeoutFees() []*types1.Coin {
	if x != nil {
		return x.TimeoutFees
	}
	return nil
}

// QueryCounterpartyAddressRequest defines the request type for the CounterpartyAddress rpc
type QueryCounterpartyAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique channel identifier
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// the relayer address to which the counterparty is registered
	RelayerAddress string `protobuf:"bytes,2,opt,name=relayer_address,json=relayerAddress,proto3" json:"relayer_address,omitempty"`
}

func (x *QueryCounterpartyAddressRequest) Reset() {
	*x = QueryCounterpartyAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCounterpartyAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCounterpartyAddressRequest) ProtoMessage() {}

func (x *QueryCounterpartyAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCounterpartyAddressRequest.ProtoReflect.Descriptor instead.
func (*QueryCounterpartyAddressRequest) Descriptor() ([]byte, []int) {
	return file_ibc_applications_fee_v1_query_proto_rawDescGZIP(), []int{12}
}

func (x *QueryCounterpartyAddressRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *QueryCounterpartyAddressRequest) GetRelayerAddress() string {
	if x != nil {
		return x.RelayerAddress
	}
	return ""
}

// QueryCounterpartyAddressResponse defines the response type for the CounterpartyAddress rpc
type QueryCounterpartyAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the counterparty address used to compensate forward relaying
	CounterpartyAddress string `protobuf:"bytes,1,opt,name=counterparty_address,json=counterpartyAddress,proto3" json:"counterparty_address,omitempty"`
}

func (x *QueryCounterpartyAddressResponse) Reset() {
	*x = QueryCounterpartyAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCounterpartyAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCounterpartyAddressResponse) ProtoMessage() {}

func (x *QueryCounterpartyAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCounterpartyAddressResponse.ProtoReflect.Descriptor instead.
func (*QueryCounterpartyAddressResponse) Descriptor() ([]byte, []int) {
	return file_ibc_applications_fee_v1_query_proto_rawDescGZIP(), []int{13}
}

func (x *QueryCounterpartyAddressResponse) GetCounterpartyAddress() string {
	if x != nil {
		return x.CounterpartyAddress
	}
	return ""
}

// QueryFeeEnabledChannelsRequest defines the request type for the FeeEnabledChannels rpc
type QueryFeeEnabledChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// block height at which to query
	QueryHeight uint64 `protobuf:"varint,2,opt,name=query_height,json=queryHeight,proto3" json:"query_height,omitempty"`
}

func (x *QueryFeeEnabledChannelsRequest) Reset() {
	*x = QueryFeeEnabledChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFeeEnabledChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFeeEnabledChannelsRequest) ProtoMessage() {}

func (x *QueryFeeEnabledChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFeeEnabledChannelsRequest.ProtoReflect.Descriptor instead.
func (*QueryFeeEnabledChannelsRequest) Descriptor() ([]byte, []int) {
	return file_ibc_applications_fee_v1_query_proto_rawDescGZIP(), []int{14}
}

func (x *QueryFeeEnabledChannelsRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryFeeEnabledChannelsRequest) GetQueryHeight() uint64 {
	if x != nil {
		return x.QueryHeight
	}
	return 0
}

// QueryFeeEnabledChannelsResponse defines the response type for the FeeEnabledChannels rpc
type QueryFeeEnabledChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of fee enabled channels
	FeeEnabledChannels []*FeeEnabledChannel `protobuf:"bytes,1,rep,name=fee_enabled_channels,json=feeEnabledChannels,proto3" json:"fee_enabled_channels,omitempty"`
}

func (x *QueryFeeEnabledChannelsResponse) Reset() {
	*x = QueryFeeEnabledChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFeeEnabledChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFeeEnabledChannelsResponse) ProtoMessage() {}

func (x *QueryFeeEnabledChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFeeEnabledChannelsResponse.ProtoReflect.Descriptor instead.
func (*QueryFeeEnabledChannelsResponse) Descriptor() ([]byte, []int) {
	return file_ibc_applications_fee_v1_query_proto_rawDescGZIP(), []int{15}
}

func (x *QueryFeeEnabledChannelsResponse) GetFeeEnabledChannels() []*FeeEnabledChannel {
	if x != nil {
		return x.FeeEnabledChannels
	}
	return nil
}

// QueryFeeEnabledChannelRequest defines the request type for the FeeEnabledChannel rpc
type QueryFeeEnabledChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique port identifier
	PortId string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	// unique channel identifier
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *QueryFeeEnabledChannelRequest) Reset() {
	*x = QueryFeeEnabledChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFeeEnabledChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFeeEnabledChannelRequest) ProtoMessage() {}

func (x *QueryFeeEnabledChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFeeEnabledChannelRequest.ProtoReflect.Descriptor instead.
func (*QueryFeeEnabledChannelRequest) Descriptor() ([]byte, []int) {
	return file_ibc_applications_fee_v1_query_proto_rawDescGZIP(), []int{16}
}

func (x *QueryFeeEnabledChannelRequest) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *QueryFeeEnabledChannelRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

// QueryFeeEnabledChannelResponse defines the response type for the FeeEnabledChannel rpc
type QueryFeeEnabledChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// boolean flag representing the fee enabled channel status
	FeeEnabled bool `protobuf:"varint,1,opt,name=fee_enabled,json=feeEnabled,proto3" json:"fee_enabled,omitempty"`
}

func (x *QueryFeeEnabledChannelResponse) Reset() {
	*x = QueryFeeEnabledChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFeeEnabledChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFeeEnabledChannelResponse) ProtoMessage() {}

func (x *QueryFeeEnabledChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ibc_applications_fee_v1_query_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFeeEnabledChannelResponse.ProtoReflect.Descriptor instead.
func (*QueryFeeEnabledChannelResponse) Descriptor() ([]byte, []int) {
	return file_ibc_applications_fee_v1_query_proto_rawDescGZIP(), []int{17}
}

func (x *QueryFeeEnabledChannelResponse) GetFeeEnabled() bool {
	if x != nil {
		return x.FeeEnabled
	}
	return false
}

var File_ibc_applications_fee_v1_query_proto protoreflect.FileDescriptor

var file_ibc_applications_fee_v1_query_proto_rawDesc = []byte{
	0x0a, 0x23, 0x69, 0x62, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x66, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x69, 0x62, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x14,
	0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x69, 0x62, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x66, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x25, 0x69, 0x62, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x69, 0x62, 0x63, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x01, 0x0a, 0x1f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x69, 0x7a, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x20, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x69, 0x7a, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x66, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x69, 0x62, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x65, 0x65, 0x73, 0x42, 0x04, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x69, 0x7a, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x42, 0x04, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x87, 0x01, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69,
	0x76, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x65, 0x65, 0x73, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x69,
	0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x29, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x69, 0x7a, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x2a, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x69, 0x7a, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x14, 0x69, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x69, 0x76, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x46, 0x65, 0x65, 0x73, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76,
	0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x5d, 0x0a, 0x19, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x46, 0x65, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x62,
	0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x1a, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x46, 0x65, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x76, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x44, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f,
	0x10, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x66, 0x65, 0x65, 0x73,
	0x22, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x76, 0x46, 0x65, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x08, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x08, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x42, 0x43, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x0f, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x61, 0x63, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x22, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x07, 0x61, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x73, 0x22, 0x60,
	0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x22, 0xa7, 0x01, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x66,
	0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x42, 0x47, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x73,
	0x22, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x46, 0x65, 0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x1f, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0xf2, 0xde, 0x1f, 0x11, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xf2,
	0xde, 0x1f, 0x16, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x76, 0x0a, 0x20, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xf2, 0xde, 0x1f,
	0x1b, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x52, 0x13, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x8b, 0x01, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0xa5, 0x01, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x66, 0x65, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x23,
	0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x1b, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x66, 0x65,
	0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x22, 0x52, 0x12, 0x66, 0x65, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x65, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xf2, 0xde, 0x1f, 0x0e,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x06,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xf2, 0xde, 0x1f, 0x11,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x22, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x1e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x0b, 0x66, 0x65, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x16, 0xf2, 0xde, 0x1f, 0x12, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x66,
	0x65, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x52, 0x0a, 0x66, 0x65, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x32, 0xa1, 0x10, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0xb9, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x69, 0x7a,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x38, 0x2e, 0x69, 0x62, 0x63, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69,
	0x76, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x69, 0x7a, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x69, 0x62, 0x63, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x66, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69,
	0x76, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x8c, 0x02,
	0x0a, 0x12, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x37, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x69, 0x7a, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x69, 0x62, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x69, 0x76, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7c,
	0x12, 0x7a, 0x2f, 0x69, 0x62, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x66, 0x65, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x7b, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x7b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x7b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x7d, 0x12, 0xee, 0x01, 0x0a,
	0x1d, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x42,
	0x2e, 0x69, 0x62, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x43, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x12,
	0x3c, 0x2f, 0x69, 0x62, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x66, 0x65, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xf8, 0x01,
	0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x46, 0x65, 0x65, 0x73, 0x12,
	0x32, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x46, 0x65, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x78,
	0x12, 0x76, 0x2f, 0x69, 0x62, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x66, 0x65, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x66, 0x65,
	0x65, 0x73, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x7b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x7b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x2f, 0x7b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x2e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x7d, 0x12, 0xf4, 0x01, 0x0a, 0x0c, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x69, 0x62, 0x63, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63,
	0x6b, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69,
	0x62, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x77, 0x12, 0x75, 0x2f, 0x69, 0x62, 0x63, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x66, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x7b,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x7b, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x7b, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x7d, 0x12,
	0x85, 0x02, 0x0a, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x46, 0x65, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x69, 0x62,
	0x63, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x81, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7b, 0x12, 0x79, 0x2f, 0x69,
	0x62, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x66, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x65, 0x65,
	0x73, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x7b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x7b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x2f, 0x7b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x2e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x7d, 0x12, 0xe0, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x38, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x69, 0x62, 0x63, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x12, 0x4c, 0x2f, 0x69,
	0x62, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x66, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x7b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xad, 0x01, 0x0a, 0x12, 0x46,
	0x65, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x37, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x65, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x69, 0x62, 0x63,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x69,
	0x62, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x66, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x65, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0xce, 0x01, 0x0a, 0x11, 0x46,
	0x65, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x36, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x46, 0x65, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x12, 0x40, 0x2f, 0x69, 0x62, 0x63, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x66, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x65, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x7b, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x7b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0x37, 0x5a, 0x35, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x69, 0x62, 0x63, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x32, 0x39, 0x2d, 0x66, 0x65, 0x65, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ibc_applications_fee_v1_query_proto_rawDescOnce sync.Once
	file_ibc_applications_fee_v1_query_proto_rawDescData = file_ibc_applications_fee_v1_query_proto_rawDesc
)

func file_ibc_applications_fee_v1_query_proto_rawDescGZIP() []byte {
	file_ibc_applications_fee_v1_query_proto_rawDescOnce.Do(func() {
		file_ibc_applications_fee_v1_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_ibc_applications_fee_v1_query_proto_rawDescData)
	})
	return file_ibc_applications_fee_v1_query_proto_rawDescData
}

var file_ibc_applications_fee_v1_query_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_ibc_applications_fee_v1_query_proto_goTypes = []interface{}{
	(*QueryIncentivizedPacketsRequest)(nil),            // 0: ibc.applications.fee.v1.QueryIncentivizedPacketsRequest
	(*QueryIncentivizedPacketsResponse)(nil),           // 1: ibc.applications.fee.v1.QueryIncentivizedPacketsResponse
	(*QueryIncentivizedPacketRequest)(nil),             // 2: ibc.applications.fee.v1.QueryIncentivizedPacketRequest
	(*QueryIncentivizedPacketResponse)(nil),            // 3: ibc.applications.fee.v1.QueryIncentivizedPacketResponse
	(*QueryIncentivizedPacketsForChannelRequest)(nil),  // 4: ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest
	(*QueryIncentivizedPacketsForChannelResponse)(nil), // 5: ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse
	(*QueryTotalRecvFeesRequest)(nil),                  // 6: ibc.applications.fee.v1.QueryTotalRecvFeesRequest
	(*QueryTotalRecvFeesResponse)(nil),                 // 7: ibc.applications.fee.v1.QueryTotalRecvFeesResponse
	(*QueryTotalAckFeesRequest)(nil),                   // 8: ibc.applications.fee.v1.QueryTotalAckFeesRequest
	(*QueryTotalAckFeesResponse)(nil),                  // 9: ibc.applications.fee.v1.QueryTotalAckFeesResponse
	(*QueryTotalTimeoutFeesRequest)(nil),               // 10: ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest
	(*QueryTotalTimeoutFeesResponse)(nil),              // 11: ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse
	(*QueryCounterpartyAddressRequest)(nil),            // 12: ibc.applications.fee.v1.QueryCounterpartyAddressRequest
	(*QueryCounterpartyAddressResponse)(nil),           // 13: ibc.applications.fee.v1.QueryCounterpartyAddressResponse
	(*QueryFeeEnabledChannelsRequest)(nil),             // 14: ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest
	(*QueryFeeEnabledChannelsResponse)(nil),            // 15: ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse
	(*QueryFeeEnabledChannelRequest)(nil),              // 16: ibc.applications.fee.v1.QueryFeeEnabledChannelRequest
	(*QueryFeeEnabledChannelResponse)(nil),             // 17: ibc.applications.fee.v1.QueryFeeEnabledChannelResponse
	(*query.PageRequest)(nil),                          // 18: cosmos.base.query.v1beta1.PageRequest
	(*IdentifiedPacketFees)(nil),                       // 19: ibc.applications.fee.v1.IdentifiedPacketFees
	(*types.PacketId)(nil),                             // 20: ibc.core.channel.v1.PacketId
	(*types1.Coin)(nil),                                // 21: cosmos.base.v1beta1.Coin
	(*FeeEnabledChannel)(nil),                          // 22: ibc.applications.fee.v1.FeeEnabledChannel
}
var file_ibc_applications_fee_v1_query_proto_depIdxs = []int32{
	18, // 0: ibc.applications.fee.v1.QueryIncentivizedPacketsRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	19, // 1: ibc.applications.fee.v1.QueryIncentivizedPacketsResponse.incentivized_packets:type_name -> ibc.applications.fee.v1.IdentifiedPacketFees
	20, // 2: ibc.applications.fee.v1.QueryIncentivizedPacketRequest.packet_id:type_name -> ibc.core.channel.v1.PacketId
	19, // 3: ibc.applications.fee.v1.QueryIncentivizedPacketResponse.incentivized_packet:type_name -> ibc.applications.fee.v1.IdentifiedPacketFees
	18, // 4: ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	19, // 5: ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse.incentivized_packets:type_name -> ibc.applications.fee.v1.IdentifiedPacketFees
	20, // 6: ibc.applications.fee.v1.QueryTotalRecvFeesRequest.packet_id:type_name -> ibc.core.channel.v1.PacketId
	21, // 7: ibc.applications.fee.v1.QueryTotalRecvFeesResponse.recv_fees:type_name -> cosmos.base.v1beta1.Coin
	20, // 8: ibc.applications.fee.v1.QueryTotalAckFeesRequest.packet_id:type_name -> ibc.core.channel.v1.PacketId
	21, // 9: ibc.applications.fee.v1.QueryTotalAckFeesResponse.ack_fees:type_name -> cosmos.base.v1beta1.Coin
	20, // 10: ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest.packet_id:type_name -> ibc.core.channel.v1.PacketId
	21, // 11: ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse.timeout_fees:type_name -> cosmos.base.v1beta1.Coin
	18, // 12: ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	22, // 13: ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse.fee_enabled_channels:type_name -> ibc.applications.fee.v1.FeeEnabledChannel
	0,  // 14: ibc.applications.fee.v1.Query.IncentivizedPackets:input_type -> ibc.applications.fee.v1.QueryIncentivizedPacketsRequest
	2,  // 15: ibc.applications.fee.v1.Query.IncentivizedPacket:input_type -> ibc.applications.fee.v1.QueryIncentivizedPacketRequest
	4,  // 16: ibc.applications.fee.v1.Query.IncentivizedPacketsForChannel:input_type -> ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest
	6,  // 17: ibc.applications.fee.v1.Query.TotalRecvFees:input_type -> ibc.applications.fee.v1.QueryTotalRecvFeesRequest
	8,  // 18: ibc.applications.fee.v1.Query.TotalAckFees:input_type -> ibc.applications.fee.v1.QueryTotalAckFeesRequest
	10, // 19: ibc.applications.fee.v1.Query.TotalTimeoutFees:input_type -> ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest
	12, // 20: ibc.applications.fee.v1.Query.CounterpartyAddress:input_type -> ibc.applications.fee.v1.QueryCounterpartyAddressRequest
	14, // 21: ibc.applications.fee.v1.Query.FeeEnabledChannels:input_type -> ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest
	16, // 22: ibc.applications.fee.v1.Query.FeeEnabledChannel:input_type -> ibc.applications.fee.v1.QueryFeeEnabledChannelRequest
	1,  // 23: ibc.applications.fee.v1.Query.IncentivizedPackets:output_type -> ibc.applications.fee.v1.QueryIncentivizedPacketsResponse
	3,  // 24: ibc.applications.fee.v1.Query.IncentivizedPacket:output_type -> ibc.applications.fee.v1.QueryIncentivizedPacketResponse
	5,  // 25: ibc.applications.fee.v1.Query.IncentivizedPacketsForChannel:output_type -> ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse
	7,  // 26: ibc.applications.fee.v1.Query.TotalRecvFees:output_type -> ibc.applications.fee.v1.QueryTotalRecvFeesResponse
	9,  // 27: ibc.applications.fee.v1.Query.TotalAckFees:output_type -> ibc.applications.fee.v1.QueryTotalAckFeesResponse
	11, // 28: ibc.applications.fee.v1.Query.TotalTimeoutFees:output_type -> ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse
	13, // 29: ibc.applications.fee.v1.Query.CounterpartyAddress:output_type -> ibc.applications.fee.v1.QueryCounterpartyAddressResponse
	15, // 30: ibc.applications.fee.v1.Query.FeeEnabledChannels:output_type -> ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse
	17, // 31: ibc.applications.fee.v1.Query.FeeEnabledChannel:output_type -> ibc.applications.fee.v1.QueryFeeEnabledChannelResponse
	23, // [23:32] is the sub-list for method output_type
	14, // [14:23] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_ibc_applications_fee_v1_query_proto_init() }
func file_ibc_applications_fee_v1_query_proto_init() {
	if File_ibc_applications_fee_v1_query_proto != nil {
		return
	}
	file_ibc_applications_fee_v1_fee_proto_init()
	file_ibc_applications_fee_v1_genesis_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ibc_applications_fee_v1_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIncentivizedPacketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_applications_fee_v1_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIncentivizedPacketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_applications_fee_v1_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIncentivizedPacketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_applications_fee_v1_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIncentivizedPacketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_applications_fee_v1_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIncentivizedPacketsForChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_applications_fee_v1_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIncentivizedPacketsForChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_applications_fee_v1_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTotalRecvFeesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_applications_fee_v1_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTotalRecvFeesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_applications_fee_v1_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTotalAckFeesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_applications_fee_v1_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTotalAckFeesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_applications_fee_v1_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTotalTimeoutFeesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_applications_fee_v1_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTotalTimeoutFeesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_applications_fee_v1_query_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCounterpartyAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_applications_fee_v1_query_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCounterpartyAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_applications_fee_v1_query_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFeeEnabledChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_applications_fee_v1_query_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFeeEnabledChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_applications_fee_v1_query_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFeeEnabledChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibc_applications_fee_v1_query_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFeeEnabledChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ibc_applications_fee_v1_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ibc_applications_fee_v1_query_proto_goTypes,
		DependencyIndexes: file_ibc_applications_fee_v1_query_proto_depIdxs,
		MessageInfos:      file_ibc_applications_fee_v1_query_proto_msgTypes,
	}.Build()
	File_ibc_applications_fee_v1_query_proto = out.File
	file_ibc_applications_fee_v1_query_proto_rawDesc = nil
	file_ibc_applications_fee_v1_query_proto_goTypes = nil
	file_ibc_applications_fee_v1_query_proto_depIdxs = nil
}
