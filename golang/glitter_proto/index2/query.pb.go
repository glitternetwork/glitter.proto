// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0-devel
// 	protoc        v3.14.0
// source: index/query.proto

package types

import (
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ListSchemaRequest is request type for the Query RPC method.
type ListSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListSchemaRequest) Reset() {
	*x = ListSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSchemaRequest) ProtoMessage() {}

func (x *ListSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSchemaRequest.ProtoReflect.Descriptor instead.
func (*ListSchemaRequest) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{0}
}

func (x *ListSchemaRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// ListSchemaResponse is response type for the Query RPC method.
type ListSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schemas    []*Schema           `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListSchemaResponse) Reset() {
	*x = ListSchemaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSchemaResponse) ProtoMessage() {}

func (x *ListSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSchemaResponse.ProtoReflect.Descriptor instead.
func (*ListSchemaResponse) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{1}
}

func (x *ListSchemaResponse) GetSchemas() []*Schema {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *ListSchemaResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// GetSchemaRequest is request type for the Query RPC method.
type GetSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaName string `protobuf:"bytes,1,opt,name=schemaName,proto3" json:"schemaName,omitempty"`
}

func (x *GetSchemaRequest) Reset() {
	*x = GetSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaRequest) ProtoMessage() {}

func (x *GetSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetSchemaRequest) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{2}
}

func (x *GetSchemaRequest) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

// GetSchemaResponse is response type for the Query RPC method.
type GetSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema *Schema `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *GetSchemaResponse) Reset() {
	*x = GetSchemaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaResponse) ProtoMessage() {}

func (x *GetSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaResponse.ProtoReflect.Descriptor instead.
func (*GetSchemaResponse) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{3}
}

func (x *GetSchemaResponse) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

// GetDocsRequest is request type for the Query RPC method.
type GetDocRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaName string `protobuf:"bytes,1,opt,name=schemaName,proto3" json:"schemaName,omitempty"`
	DocID      string `protobuf:"bytes,2,opt,name=docID,proto3" json:"docID,omitempty"`
}

func (x *GetDocRequest) Reset() {
	*x = GetDocRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocRequest) ProtoMessage() {}

func (x *GetDocRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocRequest.ProtoReflect.Descriptor instead.
func (*GetDocRequest) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{4}
}

func (x *GetDocRequest) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *GetDocRequest) GetDocID() string {
	if x != nil {
		return x.DocID
	}
	return ""
}

// GetDocsResponse is response type for the Query RPC method.
type GetDocResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Doc *Doc `protobuf:"bytes,1,opt,name=doc,proto3" json:"doc,omitempty"`
}

func (x *GetDocResponse) Reset() {
	*x = GetDocResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocResponse) ProtoMessage() {}

func (x *GetDocResponse) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocResponse.ProtoReflect.Descriptor instead.
func (*GetDocResponse) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{5}
}

func (x *GetDocResponse) GetDoc() *Doc {
	if x != nil {
		return x.Doc
	}
	return nil
}

// GetDocsRequest is request type for the Query RPC method.
type SearchDocRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaName string            `protobuf:"bytes,1,opt,name=schemaName,proto3" json:"schemaName,omitempty"`
	Query      string            `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	QueryField []string          `protobuf:"bytes,3,rep,name=queryField,proto3" json:"queryField,omitempty"`
	AggsField  []string          `protobuf:"bytes,4,rep,name=aggsField,proto3" json:"aggsField,omitempty"`
	Filter     *SearchFilters    `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	OrderBy    string            `protobuf:"bytes,6,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	Limit      int64             `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Page       int64             `protobuf:"varint,8,opt,name=page,proto3" json:"page,omitempty"`
	Factor     *FieldValueFactor `protobuf:"bytes,9,opt,name=factor,proto3" json:"factor,omitempty"`
}

func (x *SearchDocRequest) Reset() {
	*x = SearchDocRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDocRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDocRequest) ProtoMessage() {}

func (x *SearchDocRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDocRequest.ProtoReflect.Descriptor instead.
func (*SearchDocRequest) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{6}
}

func (x *SearchDocRequest) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *SearchDocRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchDocRequest) GetQueryField() []string {
	if x != nil {
		return x.QueryField
	}
	return nil
}

func (x *SearchDocRequest) GetAggsField() []string {
	if x != nil {
		return x.AggsField
	}
	return nil
}

func (x *SearchDocRequest) GetFilter() *SearchFilters {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchDocRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *SearchDocRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchDocRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchDocRequest) GetFactor() *FieldValueFactor {
	if x != nil {
		return x.Factor
	}
	return nil
}

// GetDocsResponse is response type for the Query RPC method.
type SearchDocResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchTime int64                     `protobuf:"varint,1,opt,name=searchTime,proto3" json:"searchTime,omitempty"`
	SchemaName string                    `protobuf:"bytes,2,opt,name=schemaName,proto3" json:"schemaName,omitempty"`
	Meta       *Meta                     `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	Items      []*DocItem                `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
	Facet      map[string]*SearchFilters `protobuf:"bytes,5,rep,name=facet,proto3" json:"facet,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchDocResponse) Reset() {
	*x = SearchDocResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDocResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDocResponse) ProtoMessage() {}

func (x *SearchDocResponse) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDocResponse.ProtoReflect.Descriptor instead.
func (*SearchDocResponse) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{7}
}

func (x *SearchDocResponse) GetSearchTime() int64 {
	if x != nil {
		return x.SearchTime
	}
	return 0
}

func (x *SearchDocResponse) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *SearchDocResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SearchDocResponse) GetItems() []*DocItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SearchDocResponse) GetFacet() map[string]*SearchFilters {
	if x != nil {
		return x.Facet
	}
	return nil
}

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPage  int64  `protobuf:"varint,1,opt,name=currentPage,proto3" json:"currentPage,omitempty"`
	TotalPages   int64  `protobuf:"varint,2,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalResults int64  `protobuf:"varint,3,opt,name=totalResults,proto3" json:"totalResults,omitempty"`
	Size         int64  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	SortedBy     string `protobuf:"bytes,5,opt,name=sortedBy,proto3" json:"sortedBy,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{8}
}

func (x *Meta) GetCurrentPage() int64 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *Meta) GetTotalPages() int64 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *Meta) GetTotalResults() int64 {
	if x != nil {
		return x.TotalResults
	}
	return 0
}

func (x *Meta) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Meta) GetSortedBy() string {
	if x != nil {
		return x.SortedBy
	}
	return ""
}

type DocItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Highlight map[string]*Strings `protobuf:"bytes,1,rep,name=Highlight,proto3" json:"Highlight,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data      string              `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Score     float64             `protobuf:"fixed64,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *DocItem) Reset() {
	*x = DocItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocItem) ProtoMessage() {}

func (x *DocItem) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocItem.ProtoReflect.Descriptor instead.
func (*DocItem) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{9}
}

func (x *DocItem) GetHighlight() map[string]*Strings {
	if x != nil {
		return x.Highlight
	}
	return nil
}

func (x *DocItem) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *DocItem) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type Strings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strings []string `protobuf:"bytes,1,rep,name=strings,proto3" json:"strings,omitempty"`
}

func (x *Strings) Reset() {
	*x = Strings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Strings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Strings) ProtoMessage() {}

func (x *Strings) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Strings.ProtoReflect.Descriptor instead.
func (*Strings) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{10}
}

func (x *Strings) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

type SearchFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchFilter []*SearchFilter `protobuf:"bytes,1,rep,name=search_filter,json=searchFilter,proto3" json:"search_filter,omitempty"`
}

func (x *SearchFilters) Reset() {
	*x = SearchFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFilters) ProtoMessage() {}

func (x *SearchFilters) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFilters.ProtoReflect.Descriptor instead.
func (*SearchFilters) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{11}
}

func (x *SearchFilters) GetSearchFilter() []*SearchFilter {
	if x != nil {
		return x.SearchFilter
	}
	return nil
}

type SearchFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Field    string  `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Value    string  `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	From     float32 `protobuf:"fixed32,4,opt,name=from,proto3" json:"from,omitempty"`
	To       float32 `protobuf:"fixed32,5,opt,name=to,proto3" json:"to,omitempty"`
	DocCount int64   `protobuf:"varint,6,opt,name=doc_count,json=docCount,proto3" json:"doc_count,omitempty"`
}

func (x *SearchFilter) Reset() {
	*x = SearchFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFilter) ProtoMessage() {}

func (x *SearchFilter) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFilter.ProtoReflect.Descriptor instead.
func (*SearchFilter) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{12}
}

func (x *SearchFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SearchFilter) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SearchFilter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SearchFilter) GetFrom() float32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *SearchFilter) GetTo() float32 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *SearchFilter) GetDocCount() int64 {
	if x != nil {
		return x.DocCount
	}
	return 0
}

type FieldValueFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field    string  `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Factor   float64 `protobuf:"fixed64,2,opt,name=factor,proto3" json:"factor,omitempty"`
	Missing  float64 `protobuf:"fixed64,3,opt,name=missing,proto3" json:"missing,omitempty"`
	Weight   float64 `protobuf:"fixed64,4,opt,name=weight,proto3" json:"weight,omitempty"`
	Modifier string  `protobuf:"bytes,5,opt,name=modifier,proto3" json:"modifier,omitempty"`
}

func (x *FieldValueFactor) Reset() {
	*x = FieldValueFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldValueFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldValueFactor) ProtoMessage() {}

func (x *FieldValueFactor) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldValueFactor.ProtoReflect.Descriptor instead.
func (*FieldValueFactor) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{13}
}

func (x *FieldValueFactor) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *FieldValueFactor) GetFactor() float64 {
	if x != nil {
		return x.Factor
	}
	return 0
}

func (x *FieldValueFactor) GetMissing() float64 {
	if x != nil {
		return x.Missing
	}
	return 0
}

func (x *FieldValueFactor) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *FieldValueFactor) GetModifier() string {
	if x != nil {
		return x.Modifier
	}
	return ""
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryParamsRequest) Reset() {
	*x = QueryParamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParamsRequest) ProtoMessage() {}

func (x *QueryParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParamsRequest.ProtoReflect.Descriptor instead.
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{14}
}

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// params holds all the parameters of this module.
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *QueryParamsResponse) Reset() {
	*x = QueryParamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParamsResponse) ProtoMessage() {}

func (x *QueryParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParamsResponse.ProtoReflect.Descriptor instead.
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{15}
}

func (x *QueryParamsResponse) GetParams() *Params {
	if x != nil {
		return x.Params
	}
	return nil
}

type SQLQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sql       string      `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	Arguments []*Argument `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *SQLQueryRequest) Reset() {
	*x = SQLQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLQueryRequest) ProtoMessage() {}

func (x *SQLQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLQueryRequest.ProtoReflect.Descriptor instead.
func (*SQLQueryRequest) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{16}
}

func (x *SQLQueryRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *SQLQueryRequest) GetArguments() []*Argument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type SQLQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results   []*ResultSet `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TookTimes float32      `protobuf:"fixed32,2,opt,name=took_times,json=tookTimes,proto3" json:"took_times,omitempty"`
}

func (x *SQLQueryResponse) Reset() {
	*x = SQLQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLQueryResponse) ProtoMessage() {}

func (x *SQLQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLQueryResponse.ProtoReflect.Descriptor instead.
func (*SQLQueryResponse) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{17}
}

func (x *SQLQueryResponse) GetResults() []*ResultSet {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SQLQueryResponse) GetTookTimes() float32 {
	if x != nil {
		return x.TookTimes
	}
	return 0
}

type SimpleSQLQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*SimpleSQLQueryResponse_ResultSet `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *SimpleSQLQueryResponse) Reset() {
	*x = SimpleSQLQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleSQLQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleSQLQueryResponse) ProtoMessage() {}

func (x *SimpleSQLQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleSQLQueryResponse.ProtoReflect.Descriptor instead.
func (*SimpleSQLQueryResponse) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{18}
}

func (x *SimpleSQLQueryResponse) GetResult() []*SimpleSQLQueryResponse_ResultSet {
	if x != nil {
		return x.Result
	}
	return nil
}

type SQLListTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword  string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Uid      string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Page     int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *SQLListTablesRequest) Reset() {
	*x = SQLListTablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLListTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLListTablesRequest) ProtoMessage() {}

func (x *SQLListTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLListTablesRequest.ProtoReflect.Descriptor instead.
func (*SQLListTablesRequest) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{19}
}

func (x *SQLListTablesRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SQLListTablesRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *SQLListTablesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SQLListTablesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SQLListTablesRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type SQLListTablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables []*TableInfo `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *SQLListTablesResponse) Reset() {
	*x = SQLListTablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLListTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLListTablesResponse) ProtoMessage() {}

func (x *SQLListTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLListTablesResponse.ProtoReflect.Descriptor instead.
func (*SQLListTablesResponse) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{20}
}

func (x *SQLListTablesResponse) GetTables() []*TableInfo {
	if x != nil {
		return x.Tables
	}
	return nil
}

type SQLListDatabasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SQLListDatabasesRequest) Reset() {
	*x = SQLListDatabasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLListDatabasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLListDatabasesRequest) ProtoMessage() {}

func (x *SQLListDatabasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLListDatabasesRequest.ProtoReflect.Descriptor instead.
func (*SQLListDatabasesRequest) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{21}
}

type SQLListDatabasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Databases []*DatabaseInfo `protobuf:"bytes,1,rep,name=databases,proto3" json:"databases,omitempty"`
}

func (x *SQLListDatabasesResponse) Reset() {
	*x = SQLListDatabasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLListDatabasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLListDatabasesResponse) ProtoMessage() {}

func (x *SQLListDatabasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLListDatabasesResponse.ProtoReflect.Descriptor instead.
func (*SQLListDatabasesResponse) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{22}
}

func (x *SQLListDatabasesResponse) GetDatabases() []*DatabaseInfo {
	if x != nil {
		return x.Databases
	}
	return nil
}

type SimpleSQLQueryResponse_ResultSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row map[string]*SimpleSQLQueryResponse_RowValue `protobuf:"bytes,1,rep,name=row,proto3" json:"row,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SimpleSQLQueryResponse_ResultSet) Reset() {
	*x = SimpleSQLQueryResponse_ResultSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleSQLQueryResponse_ResultSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleSQLQueryResponse_ResultSet) ProtoMessage() {}

func (x *SimpleSQLQueryResponse_ResultSet) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleSQLQueryResponse_ResultSet.ProtoReflect.Descriptor instead.
func (*SimpleSQLQueryResponse_ResultSet) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{18, 0}
}

func (x *SimpleSQLQueryResponse_ResultSet) GetRow() map[string]*SimpleSQLQueryResponse_RowValue {
	if x != nil {
		return x.Row
	}
	return nil
}

type SimpleSQLQueryResponse_RowValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value           string          `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	ColumnValueType ColumnValueType `protobuf:"varint,2,opt,name=column_value_type,json=columnValueType,proto3,enum=blockved.glitterchain.index.ColumnValueType" json:"column_value_type,omitempty"`
}

func (x *SimpleSQLQueryResponse_RowValue) Reset() {
	*x = SimpleSQLQueryResponse_RowValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_query_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleSQLQueryResponse_RowValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleSQLQueryResponse_RowValue) ProtoMessage() {}

func (x *SimpleSQLQueryResponse_RowValue) ProtoReflect() protoreflect.Message {
	mi := &file_index_query_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleSQLQueryResponse_RowValue.ProtoReflect.Descriptor instead.
func (*SimpleSQLQueryResponse_RowValue) Descriptor() ([]byte, []int) {
	return file_index_query_proto_rawDescGZIP(), []int{18, 1}
}

func (x *SimpleSQLQueryResponse_RowValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SimpleSQLQueryResponse_RowValue) GetColumnValueType() ColumnValueType {
	if x != nil {
		return x.ColumnValueType
	}
	return ColumnValueType_InvalidColumn
}

var File_index_query_proto protoreflect.FileDescriptor

var file_index_query_proto_rawDesc = []byte{
	0x0a, 0x11, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x73,
	0x71, 0x6c, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x5b, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa2, 0x01, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e,
	0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x32, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x45, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x6f, 0x63, 0x49, 0x44, 0x22, 0x4a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67,
	0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x44, 0x6f, 0x63, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x03, 0x64, 0x6f, 0x63,
	0x22, 0xd5, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x67, 0x67, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x67, 0x67, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x42, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x45, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xfd, 0x02, 0x0a, 0x11, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e,
	0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x44, 0x6f, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x4f, 0x0a, 0x05, 0x66, 0x61, 0x63, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x66, 0x61, 0x63,
	0x65, 0x74, 0x1a, 0x64, 0x0a, 0x0a, 0x46, 0x61, 0x63, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9c, 0x01, 0x0a, 0x04, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0xea, 0x01, 0x0a, 0x07, 0x44, 0x6f, 0x63, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x51, 0x0a, 0x09, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65,
	0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x44, 0x6f, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x48, 0x69, 0x67,
	0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x48, 0x69, 0x67,
	0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x1a, 0x62, 0x0a, 0x0e, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67,
	0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x23, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x5f, 0x0a, 0x0d, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x0c, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8e, 0x01, 0x0a,
	0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x14, 0x0a,
	0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x68, 0x0a,
	0x0f, 0x53, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x71, 0x6c, 0x12, 0x43, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64,
	0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x73, 0x0a, 0x10, 0x53, 0x51, 0x4c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x53, 0x65, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xc9, 0x03, 0x0a,
	0x16, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76,
	0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x51, 0x4c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0xdb,
	0x01, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x12, 0x58, 0x0a, 0x03,
	0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x51,
	0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x1a, 0x74, 0x0a, 0x08, 0x52, 0x6f, 0x77, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67,
	0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7a, 0x0a, 0x08,
	0x52, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58,
	0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x14, 0x53, 0x51, 0x4c,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x57, 0x0a, 0x15, 0x53, 0x51,
	0x4c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67,
	0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x51, 0x4c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x63,
	0x0a, 0x18, 0x53, 0x51, 0x4c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x73, 0x32, 0xf1, 0x0b, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x9f, 0x01,
	0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2e, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64,
	0x2f, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0xa8, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2d, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2f,
	0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x7b, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xab, 0x01, 0x0a, 0x06, 0x47,
	0x65, 0x74, 0x44, 0x6f, 0x63, 0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64,
	0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x12, 0x40, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65,
	0x64, 0x2f, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x7b, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x63,
	0x2f, 0x7b, 0x64, 0x6f, 0x63, 0x49, 0x44, 0x7d, 0x12, 0x9a, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x12, 0x2d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65,
	0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64,
	0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a,
	0x22, 0x23, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2f, 0x67, 0x6c, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x98, 0x01, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x2f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2f, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x9a, 0x01, 0x0a, 0x08, 0x53, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2c, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x51, 0x4c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x51, 0x4c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64,
	0x2f, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0xad, 0x01,
	0x0a, 0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53,
	0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x53, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d,
	0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2f, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x73, 0x71, 0x6c,
	0x2f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0xac, 0x01,
	0x0a, 0x0d, 0x53, 0x51, 0x4c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x31, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x51,
	0x4c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x53, 0x51, 0x4c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c,
	0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2f, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x73, 0x71, 0x6c,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0xb8, 0x01, 0x0a,
	0x10, 0x53, 0x51, 0x4c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x73, 0x12, 0x34, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x53, 0x51, 0x4c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76,
	0x65, 0x64, 0x2e, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x51, 0x4c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65,
	0x64, 0x2f, 0x67, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x76, 0x65, 0x64, 0x2f, 0x67,
	0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x78, 0x2f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_index_query_proto_rawDescOnce sync.Once
	file_index_query_proto_rawDescData = file_index_query_proto_rawDesc
)

func file_index_query_proto_rawDescGZIP() []byte {
	file_index_query_proto_rawDescOnce.Do(func() {
		file_index_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_index_query_proto_rawDescData)
	})
	return file_index_query_proto_rawDescData
}

var file_index_query_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_index_query_proto_goTypes = []interface{}{
	(*ListSchemaRequest)(nil),                // 0: blockved.glitterchain.index.ListSchemaRequest
	(*ListSchemaResponse)(nil),               // 1: blockved.glitterchain.index.ListSchemaResponse
	(*GetSchemaRequest)(nil),                 // 2: blockved.glitterchain.index.GetSchemaRequest
	(*GetSchemaResponse)(nil),                // 3: blockved.glitterchain.index.GetSchemaResponse
	(*GetDocRequest)(nil),                    // 4: blockved.glitterchain.index.GetDocRequest
	(*GetDocResponse)(nil),                   // 5: blockved.glitterchain.index.GetDocResponse
	(*SearchDocRequest)(nil),                 // 6: blockved.glitterchain.index.SearchDocRequest
	(*SearchDocResponse)(nil),                // 7: blockved.glitterchain.index.SearchDocResponse
	(*Meta)(nil),                             // 8: blockved.glitterchain.index.Meta
	(*DocItem)(nil),                          // 9: blockved.glitterchain.index.DocItem
	(*Strings)(nil),                          // 10: blockved.glitterchain.index.strings
	(*SearchFilters)(nil),                    // 11: blockved.glitterchain.index.SearchFilters
	(*SearchFilter)(nil),                     // 12: blockved.glitterchain.index.SearchFilter
	(*FieldValueFactor)(nil),                 // 13: blockved.glitterchain.index.FieldValueFactor
	(*QueryParamsRequest)(nil),               // 14: blockved.glitterchain.index.QueryParamsRequest
	(*QueryParamsResponse)(nil),              // 15: blockved.glitterchain.index.QueryParamsResponse
	(*SQLQueryRequest)(nil),                  // 16: blockved.glitterchain.index.SQLQueryRequest
	(*SQLQueryResponse)(nil),                 // 17: blockved.glitterchain.index.SQLQueryResponse
	(*SimpleSQLQueryResponse)(nil),           // 18: blockved.glitterchain.index.SimpleSQLQueryResponse
	(*SQLListTablesRequest)(nil),             // 19: blockved.glitterchain.index.SQLListTablesRequest
	(*SQLListTablesResponse)(nil),            // 20: blockved.glitterchain.index.SQLListTablesResponse
	(*SQLListDatabasesRequest)(nil),          // 21: blockved.glitterchain.index.SQLListDatabasesRequest
	(*SQLListDatabasesResponse)(nil),         // 22: blockved.glitterchain.index.SQLListDatabasesResponse
	nil,                                      // 23: blockved.glitterchain.index.SearchDocResponse.FacetEntry
	nil,                                      // 24: blockved.glitterchain.index.DocItem.HighlightEntry
	(*SimpleSQLQueryResponse_ResultSet)(nil), // 25: blockved.glitterchain.index.SimpleSQLQueryResponse.ResultSet
	(*SimpleSQLQueryResponse_RowValue)(nil),  // 26: blockved.glitterchain.index.SimpleSQLQueryResponse.RowValue
	nil,                                      // 27: blockved.glitterchain.index.SimpleSQLQueryResponse.ResultSet.RowEntry
	(*query.PageRequest)(nil),                // 28: cosmos.base.query.v1beta1.PageRequest
	(*Schema)(nil),                           // 29: blockved.glitterchain.index.Schema
	(*query.PageResponse)(nil),               // 30: cosmos.base.query.v1beta1.PageResponse
	(*Doc)(nil),                              // 31: blockved.glitterchain.index.Doc
	(*Params)(nil),                           // 32: blockved.glitterchain.index.Params
	(*Argument)(nil),                         // 33: blockved.glitterchain.index.Argument
	(*ResultSet)(nil),                        // 34: blockved.glitterchain.index.ResultSet
	(*TableInfo)(nil),                        // 35: blockved.glitterchain.index.TableInfo
	(*DatabaseInfo)(nil),                     // 36: blockved.glitterchain.index.DatabaseInfo
	(ColumnValueType)(0),                     // 37: blockved.glitterchain.index.ColumnValueType
}
var file_index_query_proto_depIdxs = []int32{
	28, // 0: blockved.glitterchain.index.ListSchemaRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	29, // 1: blockved.glitterchain.index.ListSchemaResponse.schemas:type_name -> blockved.glitterchain.index.Schema
	30, // 2: blockved.glitterchain.index.ListSchemaResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	29, // 3: blockved.glitterchain.index.GetSchemaResponse.schema:type_name -> blockved.glitterchain.index.Schema
	31, // 4: blockved.glitterchain.index.GetDocResponse.doc:type_name -> blockved.glitterchain.index.Doc
	11, // 5: blockved.glitterchain.index.SearchDocRequest.filter:type_name -> blockved.glitterchain.index.SearchFilters
	13, // 6: blockved.glitterchain.index.SearchDocRequest.factor:type_name -> blockved.glitterchain.index.FieldValueFactor
	8,  // 7: blockved.glitterchain.index.SearchDocResponse.meta:type_name -> blockved.glitterchain.index.Meta
	9,  // 8: blockved.glitterchain.index.SearchDocResponse.items:type_name -> blockved.glitterchain.index.DocItem
	23, // 9: blockved.glitterchain.index.SearchDocResponse.facet:type_name -> blockved.glitterchain.index.SearchDocResponse.FacetEntry
	24, // 10: blockved.glitterchain.index.DocItem.Highlight:type_name -> blockved.glitterchain.index.DocItem.HighlightEntry
	12, // 11: blockved.glitterchain.index.SearchFilters.search_filter:type_name -> blockved.glitterchain.index.SearchFilter
	32, // 12: blockved.glitterchain.index.QueryParamsResponse.params:type_name -> blockved.glitterchain.index.Params
	33, // 13: blockved.glitterchain.index.SQLQueryRequest.arguments:type_name -> blockved.glitterchain.index.Argument
	34, // 14: blockved.glitterchain.index.SQLQueryResponse.results:type_name -> blockved.glitterchain.index.ResultSet
	25, // 15: blockved.glitterchain.index.SimpleSQLQueryResponse.result:type_name -> blockved.glitterchain.index.SimpleSQLQueryResponse.ResultSet
	35, // 16: blockved.glitterchain.index.SQLListTablesResponse.tables:type_name -> blockved.glitterchain.index.TableInfo
	36, // 17: blockved.glitterchain.index.SQLListDatabasesResponse.databases:type_name -> blockved.glitterchain.index.DatabaseInfo
	11, // 18: blockved.glitterchain.index.SearchDocResponse.FacetEntry.value:type_name -> blockved.glitterchain.index.SearchFilters
	10, // 19: blockved.glitterchain.index.DocItem.HighlightEntry.value:type_name -> blockved.glitterchain.index.strings
	27, // 20: blockved.glitterchain.index.SimpleSQLQueryResponse.ResultSet.row:type_name -> blockved.glitterchain.index.SimpleSQLQueryResponse.ResultSet.RowEntry
	37, // 21: blockved.glitterchain.index.SimpleSQLQueryResponse.RowValue.column_value_type:type_name -> blockved.glitterchain.index.ColumnValueType
	26, // 22: blockved.glitterchain.index.SimpleSQLQueryResponse.ResultSet.RowEntry.value:type_name -> blockved.glitterchain.index.SimpleSQLQueryResponse.RowValue
	0,  // 23: blockved.glitterchain.index.Query.ListSchema:input_type -> blockved.glitterchain.index.ListSchemaRequest
	2,  // 24: blockved.glitterchain.index.Query.GetSchema:input_type -> blockved.glitterchain.index.GetSchemaRequest
	4,  // 25: blockved.glitterchain.index.Query.GetDoc:input_type -> blockved.glitterchain.index.GetDocRequest
	6,  // 26: blockved.glitterchain.index.Query.SearchDoc:input_type -> blockved.glitterchain.index.SearchDocRequest
	14, // 27: blockved.glitterchain.index.Query.Params:input_type -> blockved.glitterchain.index.QueryParamsRequest
	16, // 28: blockved.glitterchain.index.Query.SQLQuery:input_type -> blockved.glitterchain.index.SQLQueryRequest
	16, // 29: blockved.glitterchain.index.Query.SimpleSQLQuery:input_type -> blockved.glitterchain.index.SQLQueryRequest
	19, // 30: blockved.glitterchain.index.Query.SQLListTables:input_type -> blockved.glitterchain.index.SQLListTablesRequest
	21, // 31: blockved.glitterchain.index.Query.SQLListDatabases:input_type -> blockved.glitterchain.index.SQLListDatabasesRequest
	1,  // 32: blockved.glitterchain.index.Query.ListSchema:output_type -> blockved.glitterchain.index.ListSchemaResponse
	3,  // 33: blockved.glitterchain.index.Query.GetSchema:output_type -> blockved.glitterchain.index.GetSchemaResponse
	5,  // 34: blockved.glitterchain.index.Query.GetDoc:output_type -> blockved.glitterchain.index.GetDocResponse
	7,  // 35: blockved.glitterchain.index.Query.SearchDoc:output_type -> blockved.glitterchain.index.SearchDocResponse
	15, // 36: blockved.glitterchain.index.Query.Params:output_type -> blockved.glitterchain.index.QueryParamsResponse
	17, // 37: blockved.glitterchain.index.Query.SQLQuery:output_type -> blockved.glitterchain.index.SQLQueryResponse
	18, // 38: blockved.glitterchain.index.Query.SimpleSQLQuery:output_type -> blockved.glitterchain.index.SimpleSQLQueryResponse
	20, // 39: blockved.glitterchain.index.Query.SQLListTables:output_type -> blockved.glitterchain.index.SQLListTablesResponse
	22, // 40: blockved.glitterchain.index.Query.SQLListDatabases:output_type -> blockved.glitterchain.index.SQLListDatabasesResponse
	32, // [32:41] is the sub-list for method output_type
	23, // [23:32] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_index_query_proto_init() }
func file_index_query_proto_init() {
	if File_index_query_proto != nil {
		return
	}
	file_index_params_proto_init()
	file_index_index_proto_init()
	file_index_sql_engine_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_index_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSchemaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchemaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDocRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDocResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Strings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldValueFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryParamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryParamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleSQLQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLListTablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLListTablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLListDatabasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLListDatabasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleSQLQueryResponse_ResultSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_query_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleSQLQueryResponse_RowValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_index_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_index_query_proto_goTypes,
		DependencyIndexes: file_index_query_proto_depIdxs,
		MessageInfos:      file_index_query_proto_msgTypes,
	}.Build()
	File_index_query_proto = out.File
	file_index_query_proto_rawDesc = nil
	file_index_query_proto_goTypes = nil
	file_index_query_proto_depIdxs = nil
}
