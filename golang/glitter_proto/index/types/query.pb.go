// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: index/query.proto

package types

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ListSchemaRequest is request type for the Query RPC method.
type ListSchemaRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListSchemaRequest) Reset()         { *m = ListSchemaRequest{} }
func (m *ListSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*ListSchemaRequest) ProtoMessage()    {}
func (*ListSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{0}
}
func (m *ListSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSchemaRequest.Merge(m, src)
}
func (m *ListSchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSchemaRequest proto.InternalMessageInfo

func (m *ListSchemaRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// ListSchemaResponse is response type for the Query RPC method.
type ListSchemaResponse struct {
	Schemas    []Schema            `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListSchemaResponse) Reset()         { *m = ListSchemaResponse{} }
func (m *ListSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*ListSchemaResponse) ProtoMessage()    {}
func (*ListSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{1}
}
func (m *ListSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSchemaResponse.Merge(m, src)
}
func (m *ListSchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSchemaResponse proto.InternalMessageInfo

func (m *ListSchemaResponse) GetSchemas() []Schema {
	if m != nil {
		return m.Schemas
	}
	return nil
}

func (m *ListSchemaResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// GetSchemaRequest is request type for the Query RPC method.
type GetSchemaRequest struct {
	SchemaName string `protobuf:"bytes,1,opt,name=schemaName,proto3" json:"schemaName,omitempty"`
}

func (m *GetSchemaRequest) Reset()         { *m = GetSchemaRequest{} }
func (m *GetSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*GetSchemaRequest) ProtoMessage()    {}
func (*GetSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{2}
}
func (m *GetSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSchemaRequest.Merge(m, src)
}
func (m *GetSchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSchemaRequest proto.InternalMessageInfo

func (m *GetSchemaRequest) GetSchemaName() string {
	if m != nil {
		return m.SchemaName
	}
	return ""
}

// GetSchemaResponse is response type for the Query RPC method.
type GetSchemaResponse struct {
	Schema Schema `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema"`
}

func (m *GetSchemaResponse) Reset()         { *m = GetSchemaResponse{} }
func (m *GetSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*GetSchemaResponse) ProtoMessage()    {}
func (*GetSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{3}
}
func (m *GetSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSchemaResponse.Merge(m, src)
}
func (m *GetSchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSchemaResponse proto.InternalMessageInfo

func (m *GetSchemaResponse) GetSchema() Schema {
	if m != nil {
		return m.Schema
	}
	return Schema{}
}

// GetDocsRequest is request type for the Query RPC method.
type GetDocRequest struct {
	SchemaName string `protobuf:"bytes,1,opt,name=schemaName,proto3" json:"schemaName,omitempty"`
	DocID      string `protobuf:"bytes,2,opt,name=docID,proto3" json:"docID,omitempty"`
}

func (m *GetDocRequest) Reset()         { *m = GetDocRequest{} }
func (m *GetDocRequest) String() string { return proto.CompactTextString(m) }
func (*GetDocRequest) ProtoMessage()    {}
func (*GetDocRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{4}
}
func (m *GetDocRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDocRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDocRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDocRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDocRequest.Merge(m, src)
}
func (m *GetDocRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDocRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDocRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDocRequest proto.InternalMessageInfo

func (m *GetDocRequest) GetSchemaName() string {
	if m != nil {
		return m.SchemaName
	}
	return ""
}

func (m *GetDocRequest) GetDocID() string {
	if m != nil {
		return m.DocID
	}
	return ""
}

// GetDocsResponse is response type for the Query RPC method.
type GetDocResponse struct {
	Doc Doc `protobuf:"bytes,1,opt,name=doc,proto3" json:"doc"`
}

func (m *GetDocResponse) Reset()         { *m = GetDocResponse{} }
func (m *GetDocResponse) String() string { return proto.CompactTextString(m) }
func (*GetDocResponse) ProtoMessage()    {}
func (*GetDocResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{5}
}
func (m *GetDocResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDocResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDocResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDocResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDocResponse.Merge(m, src)
}
func (m *GetDocResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDocResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDocResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDocResponse proto.InternalMessageInfo

func (m *GetDocResponse) GetDoc() Doc {
	if m != nil {
		return m.Doc
	}
	return Doc{}
}

// GetDocsRequest is request type for the Query RPC method.
type SearchDocRequest struct {
	SchemaName string            `protobuf:"bytes,1,opt,name=schemaName,proto3" json:"schemaName,omitempty"`
	Query      string            `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	QueryField []string          `protobuf:"bytes,3,rep,name=queryField,proto3" json:"queryField,omitempty"`
	AggsField  []string          `protobuf:"bytes,4,rep,name=aggsField,proto3" json:"aggsField,omitempty"`
	Filter     *SearchFilters    `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	OrderBy    string            `protobuf:"bytes,6,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	Limit      int64             `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Page       int64             `protobuf:"varint,8,opt,name=page,proto3" json:"page,omitempty"`
	Factor     *FieldValueFactor `protobuf:"bytes,9,opt,name=factor,proto3" json:"factor,omitempty"`
}

func (m *SearchDocRequest) Reset()         { *m = SearchDocRequest{} }
func (m *SearchDocRequest) String() string { return proto.CompactTextString(m) }
func (*SearchDocRequest) ProtoMessage()    {}
func (*SearchDocRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{6}
}
func (m *SearchDocRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchDocRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchDocRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchDocRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchDocRequest.Merge(m, src)
}
func (m *SearchDocRequest) XXX_Size() int {
	return m.Size()
}
func (m *SearchDocRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchDocRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchDocRequest proto.InternalMessageInfo

func (m *SearchDocRequest) GetSchemaName() string {
	if m != nil {
		return m.SchemaName
	}
	return ""
}

func (m *SearchDocRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *SearchDocRequest) GetQueryField() []string {
	if m != nil {
		return m.QueryField
	}
	return nil
}

func (m *SearchDocRequest) GetAggsField() []string {
	if m != nil {
		return m.AggsField
	}
	return nil
}

func (m *SearchDocRequest) GetFilter() *SearchFilters {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *SearchDocRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func (m *SearchDocRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchDocRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SearchDocRequest) GetFactor() *FieldValueFactor {
	if m != nil {
		return m.Factor
	}
	return nil
}

// GetDocsResponse is response type for the Query RPC method.
type SearchDocResponse struct {
	SearchTime int64                     `protobuf:"varint,1,opt,name=searchTime,proto3" json:"searchTime,omitempty"`
	SchemaName string                    `protobuf:"bytes,2,opt,name=schemaName,proto3" json:"schemaName,omitempty"`
	Meta       *Meta                     `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	Items      []*DocItem                `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
	Facet      map[string]*SearchFilters `protobuf:"bytes,5,rep,name=facet,proto3" json:"facet,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SearchDocResponse) Reset()         { *m = SearchDocResponse{} }
func (m *SearchDocResponse) String() string { return proto.CompactTextString(m) }
func (*SearchDocResponse) ProtoMessage()    {}
func (*SearchDocResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{7}
}
func (m *SearchDocResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchDocResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchDocResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchDocResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchDocResponse.Merge(m, src)
}
func (m *SearchDocResponse) XXX_Size() int {
	return m.Size()
}
func (m *SearchDocResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchDocResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchDocResponse proto.InternalMessageInfo

func (m *SearchDocResponse) GetSearchTime() int64 {
	if m != nil {
		return m.SearchTime
	}
	return 0
}

func (m *SearchDocResponse) GetSchemaName() string {
	if m != nil {
		return m.SchemaName
	}
	return ""
}

func (m *SearchDocResponse) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SearchDocResponse) GetItems() []*DocItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *SearchDocResponse) GetFacet() map[string]*SearchFilters {
	if m != nil {
		return m.Facet
	}
	return nil
}

type Meta struct {
	CurrentPage  int64  `protobuf:"varint,1,opt,name=currentPage,proto3" json:"currentPage,omitempty"`
	TotalPages   int64  `protobuf:"varint,2,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalResults int64  `protobuf:"varint,3,opt,name=totalResults,proto3" json:"totalResults,omitempty"`
	Size_        int64  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	SortedBy     string `protobuf:"bytes,5,opt,name=sortedBy,proto3" json:"sortedBy,omitempty"`
}

func (m *Meta) Reset()         { *m = Meta{} }
func (m *Meta) String() string { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()    {}
func (*Meta) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{8}
}
func (m *Meta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Meta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Meta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Meta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Meta.Merge(m, src)
}
func (m *Meta) XXX_Size() int {
	return m.Size()
}
func (m *Meta) XXX_DiscardUnknown() {
	xxx_messageInfo_Meta.DiscardUnknown(m)
}

var xxx_messageInfo_Meta proto.InternalMessageInfo

func (m *Meta) GetCurrentPage() int64 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

func (m *Meta) GetTotalPages() int64 {
	if m != nil {
		return m.TotalPages
	}
	return 0
}

func (m *Meta) GetTotalResults() int64 {
	if m != nil {
		return m.TotalResults
	}
	return 0
}

func (m *Meta) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *Meta) GetSortedBy() string {
	if m != nil {
		return m.SortedBy
	}
	return ""
}

type DocItem struct {
	Highlight map[string]*Strings `protobuf:"bytes,1,rep,name=Highlight,proto3" json:"Highlight,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data      string              `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Score     float64             `protobuf:"fixed64,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *DocItem) Reset()         { *m = DocItem{} }
func (m *DocItem) String() string { return proto.CompactTextString(m) }
func (*DocItem) ProtoMessage()    {}
func (*DocItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{9}
}
func (m *DocItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DocItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DocItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocItem.Merge(m, src)
}
func (m *DocItem) XXX_Size() int {
	return m.Size()
}
func (m *DocItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DocItem.DiscardUnknown(m)
}

var xxx_messageInfo_DocItem proto.InternalMessageInfo

func (m *DocItem) GetHighlight() map[string]*Strings {
	if m != nil {
		return m.Highlight
	}
	return nil
}

func (m *DocItem) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *DocItem) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

type Strings struct {
	Strings []string `protobuf:"bytes,1,rep,name=strings,proto3" json:"strings,omitempty"`
}

func (m *Strings) Reset()         { *m = Strings{} }
func (m *Strings) String() string { return proto.CompactTextString(m) }
func (*Strings) ProtoMessage()    {}
func (*Strings) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{10}
}
func (m *Strings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Strings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Strings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Strings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Strings.Merge(m, src)
}
func (m *Strings) XXX_Size() int {
	return m.Size()
}
func (m *Strings) XXX_DiscardUnknown() {
	xxx_messageInfo_Strings.DiscardUnknown(m)
}

var xxx_messageInfo_Strings proto.InternalMessageInfo

func (m *Strings) GetStrings() []string {
	if m != nil {
		return m.Strings
	}
	return nil
}

type SearchFilters struct {
	SearchFilter []*SearchFilter `protobuf:"bytes,1,rep,name=search_filter,json=searchFilter,proto3" json:"search_filter,omitempty"`
}

func (m *SearchFilters) Reset()         { *m = SearchFilters{} }
func (m *SearchFilters) String() string { return proto.CompactTextString(m) }
func (*SearchFilters) ProtoMessage()    {}
func (*SearchFilters) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{11}
}
func (m *SearchFilters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchFilters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchFilters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchFilters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchFilters.Merge(m, src)
}
func (m *SearchFilters) XXX_Size() int {
	return m.Size()
}
func (m *SearchFilters) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchFilters.DiscardUnknown(m)
}

var xxx_messageInfo_SearchFilters proto.InternalMessageInfo

func (m *SearchFilters) GetSearchFilter() []*SearchFilter {
	if m != nil {
		return m.SearchFilter
	}
	return nil
}

type SearchFilter struct {
	Type     string  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Field    string  `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Value    string  `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	From     float32 `protobuf:"fixed32,4,opt,name=from,proto3" json:"from,omitempty"`
	To       float32 `protobuf:"fixed32,5,opt,name=to,proto3" json:"to,omitempty"`
	DocCount int64   `protobuf:"varint,6,opt,name=doc_count,json=docCount,proto3" json:"doc_count,omitempty"`
}

func (m *SearchFilter) Reset()         { *m = SearchFilter{} }
func (m *SearchFilter) String() string { return proto.CompactTextString(m) }
func (*SearchFilter) ProtoMessage()    {}
func (*SearchFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{12}
}
func (m *SearchFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchFilter.Merge(m, src)
}
func (m *SearchFilter) XXX_Size() int {
	return m.Size()
}
func (m *SearchFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchFilter.DiscardUnknown(m)
}

var xxx_messageInfo_SearchFilter proto.InternalMessageInfo

func (m *SearchFilter) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SearchFilter) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *SearchFilter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *SearchFilter) GetFrom() float32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *SearchFilter) GetTo() float32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *SearchFilter) GetDocCount() int64 {
	if m != nil {
		return m.DocCount
	}
	return 0
}

type FieldValueFactor struct {
	Field    string  `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Factor   float64 `protobuf:"fixed64,2,opt,name=factor,proto3" json:"factor,omitempty"`
	Missing  float64 `protobuf:"fixed64,3,opt,name=missing,proto3" json:"missing,omitempty"`
	Weight   float64 `protobuf:"fixed64,4,opt,name=weight,proto3" json:"weight,omitempty"`
	Modifier string  `protobuf:"bytes,5,opt,name=modifier,proto3" json:"modifier,omitempty"`
}

func (m *FieldValueFactor) Reset()         { *m = FieldValueFactor{} }
func (m *FieldValueFactor) String() string { return proto.CompactTextString(m) }
func (*FieldValueFactor) ProtoMessage()    {}
func (*FieldValueFactor) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{13}
}
func (m *FieldValueFactor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldValueFactor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldValueFactor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FieldValueFactor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldValueFactor.Merge(m, src)
}
func (m *FieldValueFactor) XXX_Size() int {
	return m.Size()
}
func (m *FieldValueFactor) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldValueFactor.DiscardUnknown(m)
}

var xxx_messageInfo_FieldValueFactor proto.InternalMessageInfo

func (m *FieldValueFactor) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *FieldValueFactor) GetFactor() float64 {
	if m != nil {
		return m.Factor
	}
	return 0
}

func (m *FieldValueFactor) GetMissing() float64 {
	if m != nil {
		return m.Missing
	}
	return 0
}

func (m *FieldValueFactor) GetWeight() float64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *FieldValueFactor) GetModifier() string {
	if m != nil {
		return m.Modifier
	}
	return ""
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{14}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{15}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type SQLQueryRequest struct {
	Sql       string      `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	Arguments []*Argument `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (m *SQLQueryRequest) Reset()         { *m = SQLQueryRequest{} }
func (m *SQLQueryRequest) String() string { return proto.CompactTextString(m) }
func (*SQLQueryRequest) ProtoMessage()    {}
func (*SQLQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{16}
}
func (m *SQLQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SQLQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SQLQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SQLQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLQueryRequest.Merge(m, src)
}
func (m *SQLQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *SQLQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SQLQueryRequest proto.InternalMessageInfo

func (m *SQLQueryRequest) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

func (m *SQLQueryRequest) GetArguments() []*Argument {
	if m != nil {
		return m.Arguments
	}
	return nil
}

type SQLQueryResponse struct {
	Results   []*ResultSet `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TookTimes float32      `protobuf:"fixed32,2,opt,name=took_times,json=tookTimes,proto3" json:"took_times,omitempty"`
}

func (m *SQLQueryResponse) Reset()         { *m = SQLQueryResponse{} }
func (m *SQLQueryResponse) String() string { return proto.CompactTextString(m) }
func (*SQLQueryResponse) ProtoMessage()    {}
func (*SQLQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{17}
}
func (m *SQLQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SQLQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SQLQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SQLQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLQueryResponse.Merge(m, src)
}
func (m *SQLQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *SQLQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SQLQueryResponse proto.InternalMessageInfo

func (m *SQLQueryResponse) GetResults() []*ResultSet {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *SQLQueryResponse) GetTookTimes() float32 {
	if m != nil {
		return m.TookTimes
	}
	return 0
}

type SimpleSQLQueryResponse struct {
	Result []*SimpleSQLQueryResponse_ResultSet `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (m *SimpleSQLQueryResponse) Reset()         { *m = SimpleSQLQueryResponse{} }
func (m *SimpleSQLQueryResponse) String() string { return proto.CompactTextString(m) }
func (*SimpleSQLQueryResponse) ProtoMessage()    {}
func (*SimpleSQLQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{18}
}
func (m *SimpleSQLQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleSQLQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleSQLQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleSQLQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleSQLQueryResponse.Merge(m, src)
}
func (m *SimpleSQLQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *SimpleSQLQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleSQLQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleSQLQueryResponse proto.InternalMessageInfo

func (m *SimpleSQLQueryResponse) GetResult() []*SimpleSQLQueryResponse_ResultSet {
	if m != nil {
		return m.Result
	}
	return nil
}

type SimpleSQLQueryResponse_ResultSet struct {
	Row map[string]*SimpleSQLQueryResponse_RowValue `protobuf:"bytes,1,rep,name=row,proto3" json:"row,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SimpleSQLQueryResponse_ResultSet) Reset()         { *m = SimpleSQLQueryResponse_ResultSet{} }
func (m *SimpleSQLQueryResponse_ResultSet) String() string { return proto.CompactTextString(m) }
func (*SimpleSQLQueryResponse_ResultSet) ProtoMessage()    {}
func (*SimpleSQLQueryResponse_ResultSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{18, 0}
}
func (m *SimpleSQLQueryResponse_ResultSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleSQLQueryResponse_ResultSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleSQLQueryResponse_ResultSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleSQLQueryResponse_ResultSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleSQLQueryResponse_ResultSet.Merge(m, src)
}
func (m *SimpleSQLQueryResponse_ResultSet) XXX_Size() int {
	return m.Size()
}
func (m *SimpleSQLQueryResponse_ResultSet) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleSQLQueryResponse_ResultSet.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleSQLQueryResponse_ResultSet proto.InternalMessageInfo

func (m *SimpleSQLQueryResponse_ResultSet) GetRow() map[string]*SimpleSQLQueryResponse_RowValue {
	if m != nil {
		return m.Row
	}
	return nil
}

type SimpleSQLQueryResponse_RowValue struct {
	Value           string          `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	ColumnValueType ColumnValueType `protobuf:"varint,2,opt,name=column_value_type,json=columnValueType,proto3,enum=blockved.glitterchain.index.ColumnValueType" json:"column_value_type,omitempty"`
}

func (m *SimpleSQLQueryResponse_RowValue) Reset()         { *m = SimpleSQLQueryResponse_RowValue{} }
func (m *SimpleSQLQueryResponse_RowValue) String() string { return proto.CompactTextString(m) }
func (*SimpleSQLQueryResponse_RowValue) ProtoMessage()    {}
func (*SimpleSQLQueryResponse_RowValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{18, 1}
}
func (m *SimpleSQLQueryResponse_RowValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleSQLQueryResponse_RowValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleSQLQueryResponse_RowValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleSQLQueryResponse_RowValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleSQLQueryResponse_RowValue.Merge(m, src)
}
func (m *SimpleSQLQueryResponse_RowValue) XXX_Size() int {
	return m.Size()
}
func (m *SimpleSQLQueryResponse_RowValue) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleSQLQueryResponse_RowValue.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleSQLQueryResponse_RowValue proto.InternalMessageInfo

func (m *SimpleSQLQueryResponse_RowValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *SimpleSQLQueryResponse_RowValue) GetColumnValueType() ColumnValueType {
	if m != nil {
		return m.ColumnValueType
	}
	return ColumnValueType_InvalidColumn
}

type SQLListTablesRequest struct {
	Keyword  string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Uid      string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Page     int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
}

func (m *SQLListTablesRequest) Reset()         { *m = SQLListTablesRequest{} }
func (m *SQLListTablesRequest) String() string { return proto.CompactTextString(m) }
func (*SQLListTablesRequest) ProtoMessage()    {}
func (*SQLListTablesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{19}
}
func (m *SQLListTablesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SQLListTablesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SQLListTablesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SQLListTablesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLListTablesRequest.Merge(m, src)
}
func (m *SQLListTablesRequest) XXX_Size() int {
	return m.Size()
}
func (m *SQLListTablesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLListTablesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SQLListTablesRequest proto.InternalMessageInfo

func (m *SQLListTablesRequest) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *SQLListTablesRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *SQLListTablesRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SQLListTablesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *SQLListTablesRequest) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

type SQLListTablesResponse struct {
	Tables []*TableInfo `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (m *SQLListTablesResponse) Reset()         { *m = SQLListTablesResponse{} }
func (m *SQLListTablesResponse) String() string { return proto.CompactTextString(m) }
func (*SQLListTablesResponse) ProtoMessage()    {}
func (*SQLListTablesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{20}
}
func (m *SQLListTablesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SQLListTablesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SQLListTablesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SQLListTablesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLListTablesResponse.Merge(m, src)
}
func (m *SQLListTablesResponse) XXX_Size() int {
	return m.Size()
}
func (m *SQLListTablesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLListTablesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SQLListTablesResponse proto.InternalMessageInfo

func (m *SQLListTablesResponse) GetTables() []*TableInfo {
	if m != nil {
		return m.Tables
	}
	return nil
}

type SQLListDatabasesRequest struct {
}

func (m *SQLListDatabasesRequest) Reset()         { *m = SQLListDatabasesRequest{} }
func (m *SQLListDatabasesRequest) String() string { return proto.CompactTextString(m) }
func (*SQLListDatabasesRequest) ProtoMessage()    {}
func (*SQLListDatabasesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{21}
}
func (m *SQLListDatabasesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SQLListDatabasesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SQLListDatabasesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SQLListDatabasesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLListDatabasesRequest.Merge(m, src)
}
func (m *SQLListDatabasesRequest) XXX_Size() int {
	return m.Size()
}
func (m *SQLListDatabasesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLListDatabasesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SQLListDatabasesRequest proto.InternalMessageInfo

type SQLListDatabasesResponse struct {
	Databases []*DatabaseInfo `protobuf:"bytes,1,rep,name=databases,proto3" json:"databases,omitempty"`
}

func (m *SQLListDatabasesResponse) Reset()         { *m = SQLListDatabasesResponse{} }
func (m *SQLListDatabasesResponse) String() string { return proto.CompactTextString(m) }
func (*SQLListDatabasesResponse) ProtoMessage()    {}
func (*SQLListDatabasesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{22}
}
func (m *SQLListDatabasesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SQLListDatabasesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SQLListDatabasesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SQLListDatabasesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLListDatabasesResponse.Merge(m, src)
}
func (m *SQLListDatabasesResponse) XXX_Size() int {
	return m.Size()
}
func (m *SQLListDatabasesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLListDatabasesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SQLListDatabasesResponse proto.InternalMessageInfo

func (m *SQLListDatabasesResponse) GetDatabases() []*DatabaseInfo {
	if m != nil {
		return m.Databases
	}
	return nil
}

type ShowCreateTableRequest struct {
	DatabaseName string `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	TableName    string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (m *ShowCreateTableRequest) Reset()         { *m = ShowCreateTableRequest{} }
func (m *ShowCreateTableRequest) String() string { return proto.CompactTextString(m) }
func (*ShowCreateTableRequest) ProtoMessage()    {}
func (*ShowCreateTableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{23}
}
func (m *ShowCreateTableRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShowCreateTableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShowCreateTableRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShowCreateTableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowCreateTableRequest.Merge(m, src)
}
func (m *ShowCreateTableRequest) XXX_Size() int {
	return m.Size()
}
func (m *ShowCreateTableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowCreateTableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShowCreateTableRequest proto.InternalMessageInfo

func (m *ShowCreateTableRequest) GetDatabaseName() string {
	if m != nil {
		return m.DatabaseName
	}
	return ""
}

func (m *ShowCreateTableRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

type ShowCreateTableResponse struct {
	Schema string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (m *ShowCreateTableResponse) Reset()         { *m = ShowCreateTableResponse{} }
func (m *ShowCreateTableResponse) String() string { return proto.CompactTextString(m) }
func (*ShowCreateTableResponse) ProtoMessage()    {}
func (*ShowCreateTableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45f7ffa2effbdabd, []int{24}
}
func (m *ShowCreateTableResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShowCreateTableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShowCreateTableResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShowCreateTableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowCreateTableResponse.Merge(m, src)
}
func (m *ShowCreateTableResponse) XXX_Size() int {
	return m.Size()
}
func (m *ShowCreateTableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowCreateTableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShowCreateTableResponse proto.InternalMessageInfo

func (m *ShowCreateTableResponse) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func init() {
	proto.RegisterType((*ListSchemaRequest)(nil), "blockved.glitterchain.index.ListSchemaRequest")
	proto.RegisterType((*ListSchemaResponse)(nil), "blockved.glitterchain.index.ListSchemaResponse")
	proto.RegisterType((*GetSchemaRequest)(nil), "blockved.glitterchain.index.GetSchemaRequest")
	proto.RegisterType((*GetSchemaResponse)(nil), "blockved.glitterchain.index.GetSchemaResponse")
	proto.RegisterType((*GetDocRequest)(nil), "blockved.glitterchain.index.GetDocRequest")
	proto.RegisterType((*GetDocResponse)(nil), "blockved.glitterchain.index.GetDocResponse")
	proto.RegisterType((*SearchDocRequest)(nil), "blockved.glitterchain.index.SearchDocRequest")
	proto.RegisterType((*SearchDocResponse)(nil), "blockved.glitterchain.index.SearchDocResponse")
	proto.RegisterMapType((map[string]*SearchFilters)(nil), "blockved.glitterchain.index.SearchDocResponse.FacetEntry")
	proto.RegisterType((*Meta)(nil), "blockved.glitterchain.index.Meta")
	proto.RegisterType((*DocItem)(nil), "blockved.glitterchain.index.DocItem")
	proto.RegisterMapType((map[string]*Strings)(nil), "blockved.glitterchain.index.DocItem.HighlightEntry")
	proto.RegisterType((*Strings)(nil), "blockved.glitterchain.index.strings")
	proto.RegisterType((*SearchFilters)(nil), "blockved.glitterchain.index.SearchFilters")
	proto.RegisterType((*SearchFilter)(nil), "blockved.glitterchain.index.SearchFilter")
	proto.RegisterType((*FieldValueFactor)(nil), "blockved.glitterchain.index.FieldValueFactor")
	proto.RegisterType((*QueryParamsRequest)(nil), "blockved.glitterchain.index.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "blockved.glitterchain.index.QueryParamsResponse")
	proto.RegisterType((*SQLQueryRequest)(nil), "blockved.glitterchain.index.SQLQueryRequest")
	proto.RegisterType((*SQLQueryResponse)(nil), "blockved.glitterchain.index.SQLQueryResponse")
	proto.RegisterType((*SimpleSQLQueryResponse)(nil), "blockved.glitterchain.index.SimpleSQLQueryResponse")
	proto.RegisterType((*SimpleSQLQueryResponse_ResultSet)(nil), "blockved.glitterchain.index.SimpleSQLQueryResponse.ResultSet")
	proto.RegisterMapType((map[string]*SimpleSQLQueryResponse_RowValue)(nil), "blockved.glitterchain.index.SimpleSQLQueryResponse.ResultSet.RowEntry")
	proto.RegisterType((*SimpleSQLQueryResponse_RowValue)(nil), "blockved.glitterchain.index.SimpleSQLQueryResponse.RowValue")
	proto.RegisterType((*SQLListTablesRequest)(nil), "blockved.glitterchain.index.SQLListTablesRequest")
	proto.RegisterType((*SQLListTablesResponse)(nil), "blockved.glitterchain.index.SQLListTablesResponse")
	proto.RegisterType((*SQLListDatabasesRequest)(nil), "blockved.glitterchain.index.SQLListDatabasesRequest")
	proto.RegisterType((*SQLListDatabasesResponse)(nil), "blockved.glitterchain.index.SQLListDatabasesResponse")
	proto.RegisterType((*ShowCreateTableRequest)(nil), "blockved.glitterchain.index.ShowCreateTableRequest")
	proto.RegisterType((*ShowCreateTableResponse)(nil), "blockved.glitterchain.index.ShowCreateTableResponse")
}

func init() { proto.RegisterFile("index/query.proto", fileDescriptor_45f7ffa2effbdabd) }

var fileDescriptor_45f7ffa2effbdabd = []byte{
	// 1763 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0x51, 0x6f, 0x1c, 0x49,
	0x11, 0xce, 0xec, 0x7a, 0xd7, 0x9e, 0x4a, 0xec, 0xd8, 0x4d, 0xf0, 0x2d, 0x73, 0x87, 0x31, 0x13,
	0x2e, 0x18, 0xe7, 0x32, 0x73, 0xde, 0xf8, 0x20, 0x58, 0x07, 0xca, 0xd9, 0x89, 0x73, 0x41, 0xe1,
	0xb8, 0xcc, 0x86, 0x23, 0x02, 0xa4, 0xd5, 0x78, 0xb6, 0x3d, 0x3b, 0xf2, 0xcc, 0xf4, 0x7a, 0xba,
	0x37, 0x66, 0xef, 0x74, 0x2f, 0xfc, 0x00, 0x40, 0xe2, 0x05, 0x21, 0x24, 0x24, 0x9e, 0x90, 0x38,
	0xde, 0xf9, 0x09, 0xc7, 0xdb, 0x49, 0x08, 0x09, 0x09, 0x09, 0xa1, 0x84, 0x27, 0xfe, 0x03, 0x12,
	0xea, 0xea, 0x9e, 0xdd, 0xd9, 0x5d, 0x6b, 0x76, 0x9d, 0x7b, 0xb1, 0xbb, 0x6a, 0xfa, 0xab, 0xfe,
	0xba, 0xba, 0xba, 0xaa, 0x7a, 0x61, 0x2d, 0x4a, 0x3b, 0xf4, 0x67, 0xee, 0x69, 0x9f, 0x66, 0x03,
	0xa7, 0x97, 0x31, 0xc1, 0xc8, 0xab, 0x47, 0x31, 0x0b, 0x4e, 0x9e, 0xd1, 0x8e, 0x13, 0xc6, 0x91,
	0x10, 0x34, 0x0b, 0xba, 0x7e, 0x94, 0x3a, 0x38, 0xd1, 0xba, 0x16, 0xb2, 0x90, 0xe1, 0x3c, 0x57,
	0x8e, 0x14, 0xc4, 0x7a, 0x2d, 0x64, 0x2c, 0x8c, 0xa9, 0xeb, 0xf7, 0x22, 0xd7, 0x4f, 0x53, 0x26,
	0x7c, 0x11, 0xb1, 0x94, 0xeb, 0xaf, 0xdb, 0x01, 0xe3, 0x09, 0xe3, 0xee, 0x91, 0xcf, 0xa9, 0x5a,
	0xc9, 0x7d, 0xb6, 0x73, 0x44, 0x85, 0xbf, 0xe3, 0xf6, 0xfc, 0x30, 0x4a, 0x71, 0xb2, 0x9e, 0x4b,
	0x14, 0x9f, 0x9e, 0x9f, 0xf9, 0x49, 0x8e, 0xd7, 0x1c, 0xf1, 0xaf, 0x56, 0xad, 0x2b, 0x15, 0x3f,
	0x8d, 0xdb, 0x34, 0x0d, 0xa3, 0x94, 0x2a, 0xbd, 0xfd, 0x13, 0x58, 0x7b, 0x14, 0x71, 0xd1, 0x0a,
	0xba, 0x34, 0xf1, 0x3d, 0x7a, 0xda, 0xa7, 0x5c, 0x90, 0x43, 0x80, 0xd1, 0x3a, 0x0d, 0x63, 0xd3,
	0xd8, 0xba, 0xdc, 0xbc, 0xe1, 0x28, 0x52, 0x8e, 0x24, 0xe5, 0xa8, 0xed, 0x6b, 0x52, 0xce, 0xfb,
	0x7e, 0x48, 0x35, 0xd6, 0x2b, 0x20, 0xed, 0x3f, 0x18, 0x40, 0x8a, 0xd6, 0x79, 0x8f, 0xa5, 0x9c,
	0x92, 0x03, 0x58, 0xe4, 0xa8, 0xe1, 0x0d, 0x63, 0xb3, 0xba, 0x75, 0xb9, 0x79, 0xdd, 0x29, 0xf1,
	0xa0, 0xa3, 0xd0, 0xfb, 0x0b, 0x9f, 0xfe, 0xeb, 0x2b, 0x97, 0xbc, 0x1c, 0x49, 0x1e, 0x8c, 0x71,
	0xac, 0x20, 0xc7, 0xaf, 0xcf, 0xe4, 0xa8, 0x18, 0x8c, 0x91, 0x6c, 0xc2, 0xea, 0x03, 0x3a, 0xe1,
	0x80, 0x0d, 0x00, 0xb5, 0xce, 0x7b, 0x7e, 0x42, 0xd1, 0x01, 0xa6, 0x57, 0xd0, 0xd8, 0x1f, 0xc0,
	0x5a, 0x01, 0xa3, 0xb7, 0xf5, 0x0e, 0xd4, 0xd5, 0x14, 0xed, 0xb1, 0x0b, 0xec, 0x4a, 0x03, 0xed,
	0xfb, 0xb0, 0xfc, 0x80, 0x8a, 0x7b, 0x2c, 0x98, 0x93, 0x08, 0xb9, 0x06, 0xb5, 0x0e, 0x0b, 0x1e,
	0xde, 0x43, 0x07, 0x98, 0x9e, 0x12, 0xec, 0xef, 0xc1, 0x4a, 0x6e, 0x46, 0x73, 0xbb, 0x03, 0xd5,
	0x0e, 0x0b, 0x34, 0xb1, 0xcd, 0x52, 0x62, 0xf7, 0x58, 0xa0, 0x59, 0x49, 0x88, 0xfd, 0xf7, 0x0a,
	0xac, 0xb6, 0xa8, 0x9f, 0x05, 0xdd, 0x8b, 0xd1, 0x42, 0xef, 0xe7, 0xb4, 0x50, 0x90, 0x28, 0x1c,
	0x1c, 0x46, 0x34, 0xee, 0x34, 0xaa, 0x9b, 0x55, 0x89, 0x1a, 0x69, 0xc8, 0x6b, 0x60, 0xfa, 0x61,
	0xc8, 0xd5, 0xe7, 0x05, 0xfc, 0x3c, 0x52, 0x90, 0x7d, 0xa8, 0x1f, 0x47, 0xb1, 0xa0, 0x59, 0xa3,
	0x86, 0xbb, 0xd8, 0x2e, 0x77, 0x2f, 0x52, 0x3e, 0x44, 0x00, 0xf7, 0x34, 0x92, 0x34, 0x60, 0x91,
	0x65, 0x1d, 0x9a, 0xed, 0x0f, 0x1a, 0x75, 0x64, 0x96, 0x8b, 0x92, 0x71, 0x1c, 0x25, 0x91, 0x68,
	0x2c, 0x6e, 0x1a, 0x5b, 0x55, 0x4f, 0x09, 0x84, 0xc0, 0x42, 0xcf, 0x0f, 0x69, 0x63, 0x09, 0x95,
	0x38, 0x26, 0xf7, 0xa1, 0x7e, 0xec, 0x07, 0x82, 0x65, 0x0d, 0x13, 0x79, 0xdc, 0x2a, 0xe5, 0x81,
	0xdc, 0x3f, 0xf0, 0xe3, 0x3e, 0x3d, 0x44, 0x90, 0xa7, 0xc1, 0xf6, 0xff, 0x2a, 0xb0, 0x56, 0xf0,
	0xab, 0x3e, 0x27, 0xe9, 0x58, 0x54, 0x3e, 0x89, 0xb4, 0x63, 0xab, 0x5e, 0x41, 0x33, 0xe1, 0xf8,
	0xca, 0x94, 0xe3, 0xdf, 0x82, 0x85, 0x84, 0x0a, 0xbf, 0x51, 0x45, 0x6a, 0x5f, 0x2d, 0xa5, 0xf6,
	0x7d, 0x2a, 0x7c, 0x0f, 0xa7, 0x93, 0x3d, 0xa8, 0x45, 0x82, 0x26, 0x1c, 0xbd, 0x7e, 0xb9, 0xf9,
	0xb5, 0x59, 0x01, 0xf2, 0x50, 0xd0, 0xc4, 0x53, 0x10, 0xf2, 0x03, 0xa8, 0x1d, 0xfb, 0x01, 0x15,
	0x8d, 0x1a, 0x62, 0xbf, 0x3d, 0xc7, 0xb1, 0x14, 0x76, 0xec, 0x1c, 0x4a, 0xec, 0xfd, 0x54, 0x64,
	0x03, 0x4f, 0xd9, 0xb1, 0x3a, 0x00, 0x23, 0x25, 0x59, 0x85, 0xea, 0x09, 0x1d, 0xe8, 0x18, 0x93,
	0x43, 0x72, 0x17, 0x6a, 0xcf, 0xa4, 0x43, 0xf5, 0xa5, 0xbf, 0x48, 0x1c, 0x28, 0xe0, 0x5e, 0xe5,
	0x8e, 0x61, 0xff, 0xce, 0x80, 0x05, 0xe9, 0x01, 0xb2, 0x09, 0x97, 0x83, 0x7e, 0x96, 0xd1, 0x54,
	0xc8, 0x14, 0xa1, 0x7d, 0x5e, 0x54, 0x49, 0xa7, 0x0b, 0x26, 0xfc, 0x58, 0x0a, 0x1c, 0x57, 0xad,
	0x7a, 0x05, 0x0d, 0xb1, 0xe1, 0x0a, 0x4a, 0x1e, 0xe5, 0xfd, 0x58, 0x70, 0x74, 0x7e, 0xd5, 0x1b,
	0xd3, 0xc9, 0x48, 0xe2, 0xd1, 0x87, 0xb4, 0xb1, 0xa0, 0x22, 0x49, 0x8e, 0x89, 0x05, 0x4b, 0x9c,
	0x65, 0x82, 0x76, 0xf6, 0x07, 0x18, 0xd3, 0xa6, 0x37, 0x94, 0xed, 0xff, 0x1a, 0xb0, 0xa8, 0x1d,
	0x4d, 0x1e, 0x83, 0xf9, 0x6e, 0x14, 0x76, 0xe3, 0x28, 0xec, 0x0a, 0x9d, 0x31, 0x6f, 0xcf, 0x73,
	0x42, 0xce, 0x10, 0xa5, 0xfc, 0x3b, 0xb2, 0x22, 0xe9, 0x74, 0x7c, 0xe1, 0xeb, 0x08, 0xc2, 0xb1,
	0xbc, 0x02, 0x3c, 0x60, 0x19, 0x45, 0xfe, 0x86, 0xa7, 0x04, 0xeb, 0x08, 0x56, 0xc6, 0xcd, 0x9c,
	0x73, 0x22, 0x7b, 0xe3, 0x27, 0x52, 0x1e, 0x3e, 0x5c, 0x64, 0x51, 0x1a, 0x8e, 0x9d, 0xc5, 0x75,
	0x58, 0xd4, 0x5a, 0x79, 0x43, 0xf5, 0x10, 0x77, 0x6a, 0x7a, 0xb9, 0x68, 0xb7, 0x61, 0x79, 0xec,
	0x30, 0xc9, 0x7b, 0xb0, 0xac, 0x6e, 0x46, 0x5b, 0xe7, 0x05, 0xe5, 0x9a, 0x6f, 0xcc, 0x1d, 0x0f,
	0xde, 0x15, 0x5e, 0x90, 0xec, 0x5f, 0x1a, 0x70, 0xa5, 0xf8, 0x59, 0x3a, 0x49, 0x0c, 0x7a, 0x79,
	0x7e, 0xc3, 0xb1, 0x74, 0xd2, 0x31, 0xe6, 0x27, 0x9d, 0xd9, 0x50, 0x90, 0x5a, 0xe5, 0x80, 0xaa,
	0xd2, 0xa2, 0x20, 0xf1, 0xc7, 0x19, 0x4b, 0xf0, 0xcc, 0x2b, 0x1e, 0x8e, 0xc9, 0x0a, 0x54, 0x04,
	0xc3, 0xd3, 0xae, 0x78, 0x15, 0xd9, 0x3b, 0x80, 0xd9, 0x61, 0x41, 0x3b, 0x60, 0xfd, 0x54, 0x60,
	0x4e, 0xaa, 0x7a, 0x4b, 0x1d, 0x16, 0x1c, 0x48, 0xd9, 0xfe, 0x85, 0x01, 0xab, 0x93, 0x09, 0x64,
	0xc4, 0xc0, 0x28, 0x32, 0x58, 0x1f, 0x66, 0xa5, 0x0a, 0x9e, 0x9e, 0x96, 0xa4, 0x3f, 0x93, 0x88,
	0xf3, 0x28, 0x0d, 0xf5, 0xb1, 0xe6, 0xa2, 0x44, 0x9c, 0x51, 0x0c, 0xa9, 0x05, 0x85, 0x50, 0x92,
	0x8c, 0xca, 0x84, 0x75, 0xa2, 0xe3, 0x48, 0x67, 0x5a, 0xd3, 0x1b, 0xca, 0xf6, 0x35, 0x20, 0x8f,
	0x65, 0xbe, 0x7e, 0x1f, 0xbb, 0x0d, 0x5d, 0x0d, 0xec, 0xa7, 0xf0, 0x85, 0x31, 0xed, 0xa8, 0x1e,
	0xaa, 0xae, 0x64, 0xae, 0x7a, 0xa8, 0xc0, 0x79, 0x3d, 0x54, 0x40, 0xbb, 0x0b, 0x57, 0x5b, 0x8f,
	0x1f, 0xa1, 0xf1, 0xbc, 0xf4, 0xac, 0x42, 0x95, 0x9f, 0xc6, 0x79, 0xf4, 0xf1, 0xd3, 0x98, 0x1c,
	0x80, 0xe9, 0x67, 0x61, 0x3f, 0xa1, 0xa9, 0x90, 0xb7, 0x53, 0xc6, 0xc0, 0xeb, 0xa5, 0x4b, 0xbd,
	0xa3, 0x67, 0x7b, 0x23, 0x9c, 0xcd, 0x61, 0x75, 0xb4, 0x92, 0xde, 0xc0, 0x5d, 0x58, 0xcc, 0xf4,
	0x95, 0x56, 0xa1, 0x75, 0xa3, 0xd4, 0xac, 0xba, 0xea, 0x2d, 0x2a, 0xbc, 0x1c, 0x46, 0xbe, 0x2c,
	0x33, 0x07, 0x3b, 0x69, 0x8b, 0x28, 0xd1, 0x99, 0xa3, 0xe2, 0x99, 0x52, 0x23, 0x93, 0x39, 0xb7,
	0xff, 0x5a, 0x85, 0xf5, 0x56, 0x94, 0xf4, 0x62, 0x3a, 0xb5, 0xf6, 0x0f, 0xa1, 0xae, 0x8c, 0xe8,
	0xa5, 0xbf, 0x53, 0x1e, 0xd5, 0xe7, 0x1a, 0x29, 0x30, 0xd2, 0xc6, 0xac, 0x7f, 0x1a, 0x60, 0x0e,
	0xb5, 0xe4, 0x29, 0x54, 0x33, 0x76, 0xa6, 0x57, 0x38, 0xfc, 0x5c, 0x2b, 0x38, 0x1e, 0x3b, 0x53,
	0x59, 0x46, 0x9a, 0xb4, 0x04, 0x2c, 0xe5, 0x8a, 0x73, 0xf2, 0x85, 0x37, 0x9e, 0x2f, 0xde, 0x7e,
	0xa9, 0x95, 0xd9, 0x19, 0xde, 0x8a, 0x42, 0x1e, 0xb1, 0x3e, 0xc4, 0x55, 0x51, 0x3d, 0xba, 0x92,
	0x46, 0xf1, 0x4a, 0x3e, 0x85, 0xb5, 0x80, 0xc5, 0xfd, 0x24, 0x6d, 0xa3, 0xdc, 0xc6, 0xfb, 0x2d,
	0x59, 0xac, 0x34, 0xdf, 0x28, 0x65, 0x71, 0x80, 0x28, 0x34, 0xfd, 0x64, 0xd0, 0xa3, 0xde, 0xd5,
	0x60, 0x5c, 0x21, 0xb3, 0xc7, 0xb5, 0xd6, 0xe3, 0x47, 0xb2, 0xdd, 0x7d, 0xe2, 0x1f, 0xc5, 0x34,
	0xbf, 0x1d, 0xf2, 0x06, 0x9e, 0xd0, 0xc1, 0x19, 0xcb, 0xf2, 0x1b, 0x9b, 0x8b, 0xd2, 0x31, 0xfd,
	0x28, 0xcf, 0x24, 0x72, 0x38, 0xec, 0x37, 0xe4, 0x55, 0xad, 0xe9, 0x7e, 0xe3, 0x55, 0x30, 0xe5,
	0xff, 0xf6, 0xb0, 0x7c, 0xd4, 0xbc, 0x25, 0xa9, 0x68, 0xe9, 0x12, 0x22, 0x73, 0xb7, 0xec, 0x77,
	0xf3, 0xcb, 0x9a, 0xcb, 0xf6, 0x8f, 0xe0, 0x8b, 0x13, 0x84, 0x74, 0x6c, 0x7d, 0x17, 0xea, 0x02,
	0x35, 0x73, 0x85, 0x35, 0x82, 0x1f, 0xa6, 0xc7, 0xcc, 0xd3, 0x28, 0xfb, 0x4b, 0xf0, 0x8a, 0x36,
	0x7c, 0x4f, 0xaf, 0x35, 0x4c, 0x05, 0x01, 0x34, 0xa6, 0x3f, 0xe9, 0x65, 0x1f, 0x80, 0x99, 0x73,
	0xe3, 0x73, 0xe5, 0xea, 0xdc, 0x04, 0x2e, 0x3e, 0xc2, 0xda, 0x3f, 0x85, 0xf5, 0x56, 0x97, 0x9d,
	0x1d, 0x64, 0xd4, 0x17, 0x14, 0xe9, 0xe5, 0xbe, 0xbe, 0x0e, 0xcb, 0xf9, 0xb4, 0x76, 0x3a, 0x6a,
	0x4d, 0xaf, 0xe4, 0x4a, 0xec, 0x91, 0xe4, 0xa5, 0x94, 0x20, 0x35, 0x43, 0x79, 0xdf, 0x44, 0x0d,
	0xf6, 0xf6, 0x3b, 0xf0, 0xca, 0x94, 0x75, 0xbd, 0x83, 0xf5, 0xb1, 0x0e, 0xdf, 0xcc, 0xdb, 0xf6,
	0xe6, 0x27, 0xcb, 0x50, 0xc3, 0xe8, 0x24, 0xbf, 0x37, 0x00, 0x46, 0x2f, 0x1e, 0xe2, 0x94, 0xee,
	0x6f, 0xea, 0xe1, 0x65, 0xb9, 0x73, 0xcf, 0x57, 0x8c, 0xec, 0x37, 0x7f, 0xfe, 0xb7, 0xff, 0xfc,
	0xba, 0xb2, 0x4d, 0xb6, 0xdc, 0x1c, 0xe8, 0x16, 0x81, 0xea, 0x09, 0xe8, 0xc6, 0x11, 0x17, 0x6d,
	0xc5, 0x95, 0xfc, 0xd1, 0x00, 0x73, 0xf8, 0x76, 0x21, 0xe5, 0xcd, 0xeb, 0xe4, 0xbb, 0xc8, 0x72,
	0xe6, 0x9d, 0xae, 0xe9, 0xbd, 0x8d, 0xf4, 0xbe, 0x49, 0x76, 0x4b, 0xe9, 0x85, 0x34, 0x67, 0xe7,
	0x7e, 0x34, 0xea, 0x65, 0x3f, 0x26, 0x7f, 0x32, 0xa0, 0xae, 0xde, 0x31, 0x64, 0x7b, 0xd6, 0xc2,
	0xa3, 0xc7, 0x89, 0x75, 0x73, 0xae, 0xb9, 0x9a, 0xe1, 0xbb, 0xc8, 0x70, 0x9f, 0xdc, 0x2d, 0x65,
	0x78, 0x0e, 0x3b, 0x64, 0xdd, 0x61, 0x81, 0xfb, 0x11, 0xbe, 0xb9, 0x3e, 0x26, 0xbf, 0x35, 0xc0,
	0x1c, 0xb6, 0xb7, 0x33, 0x1c, 0x3b, 0xf9, 0xa0, 0x9a, 0xe1, 0xd8, 0xa9, 0xae, 0xd9, 0x76, 0x90,
	0xf6, 0x96, 0x7d, 0xbd, 0x9c, 0x36, 0xe2, 0xf6, 0x8c, 0x6d, 0xf2, 0x1b, 0x03, 0xea, 0xaa, 0xc2,
	0x92, 0xf2, 0x18, 0x9b, 0x2e, 0xef, 0xd6, 0x9b, 0xf3, 0x03, 0x34, 0xbb, 0x9b, 0xc8, 0xee, 0x75,
	0x52, 0xce, 0x4e, 0xd5, 0x78, 0xe9, 0xb7, 0xa5, 0x3c, 0xbb, 0x93, 0xf2, 0x24, 0x3c, 0xd1, 0x0b,
	0x58, 0xb7, 0xe6, 0x9c, 0xad, 0x69, 0xed, 0x20, 0xad, 0x9b, 0xf6, 0x8d, 0x72, 0xa7, 0x9d, 0xc6,
	0xea, 0x37, 0x17, 0xe9, 0xb7, 0x3f, 0x1b, 0xb0, 0x32, 0x5e, 0x80, 0x2e, 0x48, 0xf1, 0xf6, 0x4b,
	0xd4, 0x36, 0xfb, 0x0e, 0x12, 0x6d, 0xda, 0xb7, 0x66, 0x12, 0xe5, 0x68, 0xa0, 0x3d, 0xe4, 0xfb,
	0x89, 0x01, 0xcb, 0x63, 0x49, 0x9f, 0xec, 0xcc, 0xa2, 0x3b, 0x55, 0xb1, 0xac, 0xe6, 0x45, 0x20,
	0x9a, 0xf2, 0x2e, 0x52, 0x76, 0xc8, 0x1b, 0x33, 0x29, 0x63, 0x32, 0x52, 0x95, 0x84, 0xfc, 0xc5,
	0xc0, 0xb6, 0x6b, 0xac, 0x5e, 0x90, 0xdd, 0x79, 0x96, 0x9f, 0xac, 0x3c, 0xd6, 0x5b, 0x17, 0x44,
	0x69, 0xde, 0xdf, 0x42, 0xde, 0x3b, 0xc4, 0x9d, 0x8f, 0xf7, 0xb0, 0x08, 0x49, 0xea, 0x57, 0x27,
	0xea, 0x04, 0x99, 0x71, 0xd8, 0xe7, 0xd6, 0x2c, 0x6b, 0xf7, 0x62, 0x20, 0xcd, 0x7b, 0x0f, 0x79,
	0xef, 0x92, 0xe6, 0xec, 0x10, 0xe9, 0xb2, 0xb3, 0x76, 0x80, 0x26, 0x94, 0xdb, 0xf7, 0x1f, 0x7e,
	0xfa, 0x7c, 0xc3, 0xf8, 0xec, 0xf9, 0x86, 0xf1, 0xef, 0xe7, 0x1b, 0xc6, 0xaf, 0x5e, 0x6c, 0x5c,
	0xfa, 0xec, 0xc5, 0xc6, 0xa5, 0x7f, 0xbc, 0xd8, 0xb8, 0xf4, 0x63, 0x37, 0x8c, 0x44, 0xb7, 0x7f,
	0xe4, 0x04, 0x2c, 0x99, 0xb2, 0x7b, 0x4b, 0x19, 0xd6, 0x3f, 0x2b, 0xba, 0xb2, 0x73, 0xe2, 0x47,
	0x75, 0xfc, 0x15, 0xf1, 0xf6, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x3f, 0x5d, 0x69, 0x16,
	0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	ListSchema(ctx context.Context, in *ListSchemaRequest, opts ...grpc.CallOption) (*ListSchemaResponse, error)
	// Parameters queries the parameters of the module.
	GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error)
	// Parameters queries the parameters of the module.
	GetDoc(ctx context.Context, in *GetDocRequest, opts ...grpc.CallOption) (*GetDocResponse, error)
	// Parameters queries the parameters of the module.
	SearchDoc(ctx context.Context, in *SearchDocRequest, opts ...grpc.CallOption) (*SearchDocResponse, error)
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// SQLQuery do queries
	SQLQuery(ctx context.Context, in *SQLQueryRequest, opts ...grpc.CallOption) (*SQLQueryResponse, error)
	// SimpleSQLQuery do queries
	SimpleSQLQuery(ctx context.Context, in *SQLQueryRequest, opts ...grpc.CallOption) (*SimpleSQLQueryResponse, error)
	// Parameters queries the parameters of the module.
	SQLListTables(ctx context.Context, in *SQLListTablesRequest, opts ...grpc.CallOption) (*SQLListTablesResponse, error)
	SQLListDatabases(ctx context.Context, in *SQLListDatabasesRequest, opts ...grpc.CallOption) (*SQLListDatabasesResponse, error)
	ShowCreateTable(ctx context.Context, in *ShowCreateTableRequest, opts ...grpc.CallOption) (*ShowCreateTableResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ListSchema(ctx context.Context, in *ListSchemaRequest, opts ...grpc.CallOption) (*ListSchemaResponse, error) {
	out := new(ListSchemaResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Query/ListSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error) {
	out := new(GetSchemaResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Query/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDoc(ctx context.Context, in *GetDocRequest, opts ...grpc.CallOption) (*GetDocResponse, error) {
	out := new(GetDocResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Query/GetDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SearchDoc(ctx context.Context, in *SearchDocRequest, opts ...grpc.CallOption) (*SearchDocResponse, error) {
	out := new(SearchDocResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Query/SearchDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SQLQuery(ctx context.Context, in *SQLQueryRequest, opts ...grpc.CallOption) (*SQLQueryResponse, error) {
	out := new(SQLQueryResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Query/SQLQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SimpleSQLQuery(ctx context.Context, in *SQLQueryRequest, opts ...grpc.CallOption) (*SimpleSQLQueryResponse, error) {
	out := new(SimpleSQLQueryResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Query/SimpleSQLQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SQLListTables(ctx context.Context, in *SQLListTablesRequest, opts ...grpc.CallOption) (*SQLListTablesResponse, error) {
	out := new(SQLListTablesResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Query/SQLListTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SQLListDatabases(ctx context.Context, in *SQLListDatabasesRequest, opts ...grpc.CallOption) (*SQLListDatabasesResponse, error) {
	out := new(SQLListDatabasesResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Query/SQLListDatabases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowCreateTable(ctx context.Context, in *ShowCreateTableRequest, opts ...grpc.CallOption) (*ShowCreateTableResponse, error) {
	out := new(ShowCreateTableResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Query/ShowCreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	ListSchema(context.Context, *ListSchemaRequest) (*ListSchemaResponse, error)
	// Parameters queries the parameters of the module.
	GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error)
	// Parameters queries the parameters of the module.
	GetDoc(context.Context, *GetDocRequest) (*GetDocResponse, error)
	// Parameters queries the parameters of the module.
	SearchDoc(context.Context, *SearchDocRequest) (*SearchDocResponse, error)
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// SQLQuery do queries
	SQLQuery(context.Context, *SQLQueryRequest) (*SQLQueryResponse, error)
	// SimpleSQLQuery do queries
	SimpleSQLQuery(context.Context, *SQLQueryRequest) (*SimpleSQLQueryResponse, error)
	// Parameters queries the parameters of the module.
	SQLListTables(context.Context, *SQLListTablesRequest) (*SQLListTablesResponse, error)
	SQLListDatabases(context.Context, *SQLListDatabasesRequest) (*SQLListDatabasesResponse, error)
	ShowCreateTable(context.Context, *ShowCreateTableRequest) (*ShowCreateTableResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ListSchema(ctx context.Context, req *ListSchemaRequest) (*ListSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSchema not implemented")
}
func (*UnimplementedQueryServer) GetSchema(ctx context.Context, req *GetSchemaRequest) (*GetSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (*UnimplementedQueryServer) GetDoc(ctx context.Context, req *GetDocRequest) (*GetDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoc not implemented")
}
func (*UnimplementedQueryServer) SearchDoc(ctx context.Context, req *SearchDocRequest) (*SearchDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDoc not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) SQLQuery(ctx context.Context, req *SQLQueryRequest) (*SQLQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SQLQuery not implemented")
}
func (*UnimplementedQueryServer) SimpleSQLQuery(ctx context.Context, req *SQLQueryRequest) (*SimpleSQLQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleSQLQuery not implemented")
}
func (*UnimplementedQueryServer) SQLListTables(ctx context.Context, req *SQLListTablesRequest) (*SQLListTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SQLListTables not implemented")
}
func (*UnimplementedQueryServer) SQLListDatabases(ctx context.Context, req *SQLListDatabasesRequest) (*SQLListDatabasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SQLListDatabases not implemented")
}
func (*UnimplementedQueryServer) ShowCreateTable(ctx context.Context, req *ShowCreateTableRequest) (*ShowCreateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCreateTable not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ListSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Query/ListSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListSchema(ctx, req.(*ListSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Query/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSchema(ctx, req.(*GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Query/GetDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDoc(ctx, req.(*GetDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SearchDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SearchDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Query/SearchDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SearchDoc(ctx, req.(*SearchDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SQLQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SQLQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Query/SQLQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SQLQuery(ctx, req.(*SQLQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SimpleSQLQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SimpleSQLQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Query/SimpleSQLQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SimpleSQLQuery(ctx, req.(*SQLQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SQLListTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLListTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SQLListTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Query/SQLListTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SQLListTables(ctx, req.(*SQLListTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SQLListDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLListDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SQLListDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Query/SQLListDatabases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SQLListDatabases(ctx, req.(*SQLListDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowCreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowCreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Query/ShowCreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowCreateTable(ctx, req.(*ShowCreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blockved.glitterchain.index.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSchema",
			Handler:    _Query_ListSchema_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _Query_GetSchema_Handler,
		},
		{
			MethodName: "GetDoc",
			Handler:    _Query_GetDoc_Handler,
		},
		{
			MethodName: "SearchDoc",
			Handler:    _Query_SearchDoc_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "SQLQuery",
			Handler:    _Query_SQLQuery_Handler,
		},
		{
			MethodName: "SimpleSQLQuery",
			Handler:    _Query_SimpleSQLQuery_Handler,
		},
		{
			MethodName: "SQLListTables",
			Handler:    _Query_SQLListTables_Handler,
		},
		{
			MethodName: "SQLListDatabases",
			Handler:    _Query_SQLListDatabases_Handler,
		},
		{
			MethodName: "ShowCreateTable",
			Handler:    _Query_ShowCreateTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "index/query.proto",
}

func (m *ListSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Schemas) > 0 {
		for iNdEx := len(m.Schemas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Schemas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchemaName) > 0 {
		i -= len(m.SchemaName)
		copy(dAtA[i:], m.SchemaName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SchemaName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Schema.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetDocRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDocRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDocRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DocID) > 0 {
		i -= len(m.DocID)
		copy(dAtA[i:], m.DocID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DocID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SchemaName) > 0 {
		i -= len(m.SchemaName)
		copy(dAtA[i:], m.SchemaName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SchemaName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDocResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDocResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDocResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Doc.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SearchDocRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchDocRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchDocRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Factor != nil {
		{
			size, err := m.Factor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Page != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x40
	}
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x38
	}
	if len(m.OrderBy) > 0 {
		i -= len(m.OrderBy)
		copy(dAtA[i:], m.OrderBy)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderBy)))
		i--
		dAtA[i] = 0x32
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AggsField) > 0 {
		for iNdEx := len(m.AggsField) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AggsField[iNdEx])
			copy(dAtA[i:], m.AggsField[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.AggsField[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.QueryField) > 0 {
		for iNdEx := len(m.QueryField) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.QueryField[iNdEx])
			copy(dAtA[i:], m.QueryField[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryField[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SchemaName) > 0 {
		i -= len(m.SchemaName)
		copy(dAtA[i:], m.SchemaName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SchemaName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchDocResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchDocResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchDocResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Facet) > 0 {
		for k := range m.Facet {
			v := m.Facet[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SchemaName) > 0 {
		i -= len(m.SchemaName)
		copy(dAtA[i:], m.SchemaName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SchemaName)))
		i--
		dAtA[i] = 0x12
	}
	if m.SearchTime != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SearchTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Meta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Meta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Meta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SortedBy) > 0 {
		i -= len(m.SortedBy)
		copy(dAtA[i:], m.SortedBy)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SortedBy)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Size_ != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalResults != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalResults))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalPages != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalPages))
		i--
		dAtA[i] = 0x10
	}
	if m.CurrentPage != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentPage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DocItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Score != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Score))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Highlight) > 0 {
		for k := range m.Highlight {
			v := m.Highlight[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Strings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Strings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Strings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Strings) > 0 {
		for iNdEx := len(m.Strings) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Strings[iNdEx])
			copy(dAtA[i:], m.Strings[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Strings[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SearchFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchFilters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchFilters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SearchFilter) > 0 {
		for iNdEx := len(m.SearchFilter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SearchFilter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SearchFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DocCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DocCount))
		i--
		dAtA[i] = 0x30
	}
	if m.To != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.To))))
		i--
		dAtA[i] = 0x2d
	}
	if m.From != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.From))))
		i--
		dAtA[i] = 0x25
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FieldValueFactor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldValueFactor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldValueFactor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Modifier) > 0 {
		i -= len(m.Modifier)
		copy(dAtA[i:], m.Modifier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Modifier)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Weight != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Weight))))
		i--
		dAtA[i] = 0x21
	}
	if m.Missing != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Missing))))
		i--
		dAtA[i] = 0x19
	}
	if m.Factor != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Factor))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SQLQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SQLQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Arguments) > 0 {
		for iNdEx := len(m.Arguments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Arguments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sql) > 0 {
		i -= len(m.Sql)
		copy(dAtA[i:], m.Sql)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sql)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SQLQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SQLQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TookTimes != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TookTimes))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimpleSQLQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleSQLQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleSQLQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for iNdEx := len(m.Result) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Result[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimpleSQLQueryResponse_ResultSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleSQLQueryResponse_ResultSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleSQLQueryResponse_ResultSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Row) > 0 {
		for k := range m.Row {
			v := m.Row[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimpleSQLQueryResponse_RowValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleSQLQueryResponse_RowValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleSQLQueryResponse_RowValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ColumnValueType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ColumnValueType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SQLListTablesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLListTablesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SQLListTablesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Database) > 0 {
		i -= len(m.Database)
		copy(dAtA[i:], m.Database)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Database)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PageSize != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Keyword) > 0 {
		i -= len(m.Keyword)
		copy(dAtA[i:], m.Keyword)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Keyword)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SQLListTablesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLListTablesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SQLListTablesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tables) > 0 {
		for iNdEx := len(m.Tables) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tables[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SQLListDatabasesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLListDatabasesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SQLListDatabasesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SQLListDatabasesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLListDatabasesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SQLListDatabasesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Databases) > 0 {
		for iNdEx := len(m.Databases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Databases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShowCreateTableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShowCreateTableRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShowCreateTableRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DatabaseName) > 0 {
		i -= len(m.DatabaseName)
		copy(dAtA[i:], m.DatabaseName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DatabaseName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShowCreateTableResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShowCreateTableResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShowCreateTableResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListSchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ListSchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Schemas) > 0 {
		for _, e := range m.Schemas {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetSchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SchemaName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetSchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Schema.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetDocRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SchemaName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DocID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetDocResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Doc.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *SearchDocRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SchemaName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.QueryField) > 0 {
		for _, s := range m.QueryField {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.AggsField) > 0 {
		for _, s := range m.AggsField {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OrderBy)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovQuery(uint64(m.Page))
	}
	if m.Factor != nil {
		l = m.Factor.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SearchDocResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SearchTime != 0 {
		n += 1 + sovQuery(uint64(m.SearchTime))
	}
	l = len(m.SchemaName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Facet) > 0 {
		for k, v := range m.Facet {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Meta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentPage != 0 {
		n += 1 + sovQuery(uint64(m.CurrentPage))
	}
	if m.TotalPages != 0 {
		n += 1 + sovQuery(uint64(m.TotalPages))
	}
	if m.TotalResults != 0 {
		n += 1 + sovQuery(uint64(m.TotalResults))
	}
	if m.Size_ != 0 {
		n += 1 + sovQuery(uint64(m.Size_))
	}
	l = len(m.SortedBy)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DocItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Highlight) > 0 {
		for k, v := range m.Highlight {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Score != 0 {
		n += 9
	}
	return n
}

func (m *Strings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Strings) > 0 {
		for _, s := range m.Strings {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *SearchFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SearchFilter) > 0 {
		for _, e := range m.SearchFilter {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *SearchFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.From != 0 {
		n += 5
	}
	if m.To != 0 {
		n += 5
	}
	if m.DocCount != 0 {
		n += 1 + sovQuery(uint64(m.DocCount))
	}
	return n
}

func (m *FieldValueFactor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Factor != 0 {
		n += 9
	}
	if m.Missing != 0 {
		n += 9
	}
	if m.Weight != 0 {
		n += 9
	}
	l = len(m.Modifier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *SQLQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sql)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Arguments) > 0 {
		for _, e := range m.Arguments {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *SQLQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.TookTimes != 0 {
		n += 5
	}
	return n
}

func (m *SimpleSQLQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *SimpleSQLQueryResponse_ResultSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Row) > 0 {
		for k, v := range m.Row {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SimpleSQLQueryResponse_RowValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ColumnValueType != 0 {
		n += 1 + sovQuery(uint64(m.ColumnValueType))
	}
	return n
}

func (m *SQLListTablesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovQuery(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovQuery(uint64(m.PageSize))
	}
	l = len(m.Database)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SQLListTablesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tables) > 0 {
		for _, e := range m.Tables {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *SQLListDatabasesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SQLListDatabasesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Databases) > 0 {
		for _, e := range m.Databases {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ShowCreateTableRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DatabaseName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ShowCreateTableResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schemas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schemas = append(m.Schemas, Schema{})
			if err := m.Schemas[len(m.Schemas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Schema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDocRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDocRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDocRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDocResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDocResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDocResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Doc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchDocRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchDocRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchDocRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryField = append(m.QueryField, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggsField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggsField = append(m.AggsField, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &SearchFilters{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Factor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Factor == nil {
				m.Factor = &FieldValueFactor{}
			}
			if err := m.Factor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchDocResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchDocResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchDocResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchTime", wireType)
			}
			m.SearchTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SearchTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &Meta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &DocItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Facet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Facet == nil {
				m.Facet = make(map[string]*SearchFilters)
			}
			var mapkey string
			var mapvalue *SearchFilters
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SearchFilters{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Facet[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Meta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Meta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Meta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPage", wireType)
			}
			m.CurrentPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPages", wireType)
			}
			m.TotalPages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPages |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalResults", wireType)
			}
			m.TotalResults = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalResults |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Highlight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Highlight == nil {
				m.Highlight = make(map[string]*Strings)
			}
			var mapkey string
			var mapvalue *Strings
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Strings{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Highlight[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Score = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Strings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: strings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: strings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strings = append(m.Strings, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchFilter = append(m.SearchFilter, &SearchFilter{})
			if err := m.SearchFilter[len(m.SearchFilter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.From = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.To = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocCount", wireType)
			}
			m.DocCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DocCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldValueFactor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldValueFactor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldValueFactor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Factor", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Factor = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Missing", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Missing = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Weight = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQLQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sql", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sql = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments, &Argument{})
			if err := m.Arguments[len(m.Arguments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQLQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &ResultSet{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TookTimes", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TookTimes = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleSQLQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleSQLQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleSQLQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &SimpleSQLQueryResponse_ResultSet{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleSQLQueryResponse_ResultSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Row == nil {
				m.Row = make(map[string]*SimpleSQLQueryResponse_RowValue)
			}
			var mapkey string
			var mapvalue *SimpleSQLQueryResponse_RowValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SimpleSQLQueryResponse_RowValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Row[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleSQLQueryResponse_RowValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnValueType", wireType)
			}
			m.ColumnValueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnValueType |= ColumnValueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQLListTablesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLListTablesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLListTablesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQLListTablesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLListTablesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLListTablesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tables = append(m.Tables, &TableInfo{})
			if err := m.Tables[len(m.Tables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQLListDatabasesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLListDatabasesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLListDatabasesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQLListDatabasesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLListDatabasesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLListDatabasesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Databases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Databases = append(m.Databases, &DatabaseInfo{})
			if err := m.Databases[len(m.Databases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShowCreateTableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShowCreateTableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShowCreateTableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatabaseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShowCreateTableResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShowCreateTableResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShowCreateTableResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
